
driver_development.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000080c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080009a0  080009a0  000109a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080009b0  080009b0  000109b8  2**0
                  CONTENTS
  4 .ARM          00000000  080009b0  080009b0  000109b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009b0  080009b8  000109b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009b0  080009b0  000109b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009b4  080009b4  000109b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000109b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000109b8  2**0
                  CONTENTS
 10 .bss          0000005c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000005c  2000005c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000109b8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000109e8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001295  00000000  00000000  00010a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000004e8  00000000  00000000  00011cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000120  00000000  00000000  000121a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000c1  00000000  00000000  000122c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000280b  00000000  00000000  00012389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001d39  00000000  00000000  00014b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000a4ee  00000000  00000000  000168cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000360  00000000  00000000  00020dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0002111c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000988 	.word	0x08000988

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000988 	.word	0x08000988

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <EXTI15_10_IRQHandler>:

SPI_HandleTypeDef_t SPI_HandleStructure;
USART_HandleTypeDef_t USART_Handle;

void EXTI15_10_IRQHandler()
{
 80001e4:	b590      	push	{r4, r7, lr}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
	char msgToSend[] = "Hello World!\n";
 80001ea:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <EXTI15_10_IRQHandler+0x44>)
 80001ec:	463c      	mov	r4, r7
 80001ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001f0:	c407      	stmia	r4!, {r0, r1, r2}
 80001f2:	8023      	strh	r3, [r4, #0]
	if(EXTI->PR1 & (0x1 << 0xDU))
 80001f4:	4b0d      	ldr	r3, [pc, #52]	; (800022c <EXTI15_10_IRQHandler+0x48>)
 80001f6:	695b      	ldr	r3, [r3, #20]
 80001f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d00e      	beq.n	800021e <EXTI15_10_IRQHandler+0x3a>
	{
		EXTI->PR1 |= (0x0U << 0xDU);
 8000200:	4b0a      	ldr	r3, [pc, #40]	; (800022c <EXTI15_10_IRQHandler+0x48>)
 8000202:	4a0a      	ldr	r2, [pc, #40]	; (800022c <EXTI15_10_IRQHandler+0x48>)
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	6153      	str	r3, [r2, #20]
		SPI_TransmitData(&SPI_HandleStructure, (uint8_t*)msgToSend, strlen(msgToSend));
 8000208:	463b      	mov	r3, r7
 800020a:	4618      	mov	r0, r3
 800020c:	f7ff ffe2 	bl	80001d4 <strlen>
 8000210:	4603      	mov	r3, r0
 8000212:	b29a      	uxth	r2, r3
 8000214:	463b      	mov	r3, r7
 8000216:	4619      	mov	r1, r3
 8000218:	4805      	ldr	r0, [pc, #20]	; (8000230 <EXTI15_10_IRQHandler+0x4c>)
 800021a:	f000 fb47 	bl	80008ac <SPI_TransmitData>
	}

	//GPIO_TogglePin(GPIOA, GPIO_PIN_5);
}
 800021e:	bf00      	nop
 8000220:	3714      	adds	r7, #20
 8000222:	46bd      	mov	sp, r7
 8000224:	bd90      	pop	{r4, r7, pc}
 8000226:	bf00      	nop
 8000228:	080009a0 	.word	0x080009a0
 800022c:	40010400 	.word	0x40010400
 8000230:	2000001c 	.word	0x2000001c

08000234 <main>:

int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	GPIO_LedConfig();
 8000238:	f000 f814 	bl	8000264 <GPIO_LedConfig>
	//GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_Pin_Reset);

	GPIO_ButtonConfig();
 800023c:	f000 f84a 	bl	80002d4 <GPIO_ButtonConfig>
	//GPIO_LockPin(GPIOC, GPIO_PIN_13);
	//GPIO_LockControl();
	GPIO_ButtonInterruptConfig();
 8000240:	f000 f87a 	bl	8000338 <GPIO_ButtonInterruptConfig>

	SPI_GPIO_Config();
 8000244:	f000 f8de 	bl	8000404 <SPI_GPIO_Config>

	SPI_Config();
 8000248:	f000 f8a2 	bl	8000390 <SPI_Config>

	USART_Handle.Instance = USART2;
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <main+0x28>)
 800024e:	4a04      	ldr	r2, [pc, #16]	; (8000260 <main+0x2c>)
 8000250:	601a      	str	r2, [r3, #0]
	USART_Handle.Init.BaudRate = 115200;
 8000252:	4b02      	ldr	r3, [pc, #8]	; (800025c <main+0x28>)
 8000254:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000258:	609a      	str	r2, [r3, #8]
//		{
//
//			while(GPIO_ReadPin(GPIOC, GPIO_PIN_13) != GPIO_Pin_Set);
//		}
//	}
	for(;;);
 800025a:	e7fe      	b.n	800025a <main+0x26>
 800025c:	2000003c 	.word	0x2000003c
 8000260:	40004400 	.word	0x40004400

08000264 <GPIO_LedConfig>:
}

static void GPIO_LedConfig()
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b088      	sub	sp, #32
 8000268:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 800026a:	2300      	movs	r3, #0
 800026c:	61fb      	str	r3, [r7, #28]
 800026e:	4b18      	ldr	r3, [pc, #96]	; (80002d0 <GPIO_LedConfig+0x6c>)
 8000270:	695b      	ldr	r3, [r3, #20]
 8000272:	4a17      	ldr	r2, [pc, #92]	; (80002d0 <GPIO_LedConfig+0x6c>)
 8000274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000278:	6153      	str	r3, [r2, #20]
 800027a:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <GPIO_LedConfig+0x6c>)
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000282:	61fb      	str	r3, [r7, #28]

	GPIO_InitTypeDef_t GPIO_Config = {0};
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	60da      	str	r2, [r3, #12]
 8000290:	611a      	str	r2, [r3, #16]
 8000292:	615a      	str	r2, [r3, #20]
	GPIO_Config.Pin = GPIO_PIN_5;
 8000294:	2320      	movs	r3, #32
 8000296:	607b      	str	r3, [r7, #4]
	GPIO_Config.Mode = GPIO_MODE_OUTPUT;
 8000298:	2301      	movs	r3, #1
 800029a:	60bb      	str	r3, [r7, #8]
	GPIO_Config.Speed = GPIO_OSPEED_LOW;
 800029c:	2300      	movs	r3, #0
 800029e:	613b      	str	r3, [r7, #16]
	GPIO_Config.Otype = GPIO_OTYPE_PP;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
	GPIO_Config.PuPd = GPIO_PUPD_NOPULL;
 80002a4:	2300      	movs	r3, #0
 80002a6:	617b      	str	r3, [r7, #20]

	GPIO_Init(GPIOA, &GPIO_Config);
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	4619      	mov	r1, r3
 80002ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b0:	f000 f9fa 	bl	80006a8 <GPIO_Init>
	memset(&GPIO_Config, 0, sizeof(GPIO_Config));
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2218      	movs	r2, #24
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 fb38 	bl	8000930 <memset>


	EXTI_LineConfig(EXTI_PortSource_GPIOC, EXTI_LineSource_13);
 80002c0:	210d      	movs	r1, #13
 80002c2:	2002      	movs	r0, #2
 80002c4:	f000 f8f8 	bl	80004b8 <EXTI_LineConfig>
}
 80002c8:	bf00      	nop
 80002ca:	3720      	adds	r7, #32
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	40021000 	.word	0x40021000

080002d4 <GPIO_ButtonConfig>:

static void GPIO_ButtonConfig()
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b088      	sub	sp, #32
 80002d8:	af00      	add	r7, sp, #0
	RCC_GPIOC_CLK_EN();
 80002da:	2300      	movs	r3, #0
 80002dc:	61fb      	str	r3, [r7, #28]
 80002de:	4b14      	ldr	r3, [pc, #80]	; (8000330 <GPIO_ButtonConfig+0x5c>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a13      	ldr	r2, [pc, #76]	; (8000330 <GPIO_ButtonConfig+0x5c>)
 80002e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b11      	ldr	r3, [pc, #68]	; (8000330 <GPIO_ButtonConfig+0x5c>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80002f2:	61fb      	str	r3, [r7, #28]

	GPIO_InitTypeDef_t GPIO_Config = {0};
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
 8000300:	611a      	str	r2, [r3, #16]
 8000302:	615a      	str	r2, [r3, #20]
	GPIO_Config.Pin = GPIO_PIN_13;
 8000304:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000308:	607b      	str	r3, [r7, #4]
	GPIO_Config.Mode = GPIO_MODE_INPUT;
 800030a:	2300      	movs	r3, #0
 800030c:	60bb      	str	r3, [r7, #8]
	GPIO_Config.PuPd = GPIO_PUPD_PULLUP;
 800030e:	2301      	movs	r3, #1
 8000310:	617b      	str	r3, [r7, #20]

	GPIO_Init(GPIOC, &GPIO_Config);
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	4619      	mov	r1, r3
 8000316:	4807      	ldr	r0, [pc, #28]	; (8000334 <GPIO_ButtonConfig+0x60>)
 8000318:	f000 f9c6 	bl	80006a8 <GPIO_Init>
	memset(&GPIO_Config, 0, sizeof(GPIO_Config));
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2218      	movs	r2, #24
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f000 fb04 	bl	8000930 <memset>
}
 8000328:	bf00      	nop
 800032a:	3720      	adds	r7, #32
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40021000 	.word	0x40021000
 8000334:	48000800 	.word	0x48000800

08000338 <GPIO_ButtonInterruptConfig>:
	GPIO_Init(GPIOC, &GPIO_Config);
	memset(&GPIO_Config, 0, sizeof(GPIO_Config));
}*/

static void GPIO_ButtonInterruptConfig()
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
	//RCC_GPIOA_CLK_EN();
	RCC_SYSCFG_CLK_EN();
 800033e:	2300      	movs	r3, #0
 8000340:	607b      	str	r3, [r7, #4]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <GPIO_ButtonInterruptConfig+0x54>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4a11      	ldr	r2, [pc, #68]	; (800038c <GPIO_ButtonInterruptConfig+0x54>)
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	6193      	str	r3, [r2, #24]
 800034e:	4b0f      	ldr	r3, [pc, #60]	; (800038c <GPIO_ButtonInterruptConfig+0x54>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	f003 0301 	and.w	r3, r3, #1
 8000356:	607b      	str	r3, [r7, #4]
	EXTI_InitTypeDef_t EXTI_InitStruct = {0};
 8000358:	2300      	movs	r3, #0
 800035a:	603b      	str	r3, [r7, #0]

	EXTI_LineConfig(EXTI_PortSource_GPIOC, EXTI_LineSource_13);
 800035c:	210d      	movs	r1, #13
 800035e:	2002      	movs	r0, #2
 8000360:	f000 f8aa 	bl	80004b8 <EXTI_LineConfig>

	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8000364:	2301      	movs	r3, #1
 8000366:	70fb      	strb	r3, [r7, #3]
	EXTI_InitStruct.EXTI_LineNumber = EXTI_LineSource_13;
 8000368:	230d      	movs	r3, #13
 800036a:	703b      	strb	r3, [r7, #0]
	EXTI_InitStruct.EXTI_Mode = EXTI_MODE_Interrupt;
 800036c:	2300      	movs	r3, #0
 800036e:	70bb      	strb	r3, [r7, #2]
	EXTI_InitStruct.TriggerSelection = EXTI_Trigger_Falling;
 8000370:	230c      	movs	r3, #12
 8000372:	707b      	strb	r3, [r7, #1]

	EXTI_Init(&EXTI_InitStruct);
 8000374:	463b      	mov	r3, r7
 8000376:	4618      	mov	r0, r3
 8000378:	f000 f8d2 	bl	8000520 <EXTI_Init>

	NVIC_EnableInterrupt(EXTI15_10_IRQNumber);
 800037c:	2028      	movs	r0, #40	; 0x28
 800037e:	f000 f95f 	bl	8000640 <NVIC_EnableInterrupt>
}
 8000382:	bf00      	nop
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	40021000 	.word	0x40021000

08000390 <SPI_Config>:

static void SPI_Config()
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
	RCC_SPI1_CLK_EN();
 8000396:	2300      	movs	r3, #0
 8000398:	607b      	str	r3, [r7, #4]
 800039a:	4b17      	ldr	r3, [pc, #92]	; (80003f8 <SPI_Config+0x68>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	4a16      	ldr	r2, [pc, #88]	; (80003f8 <SPI_Config+0x68>)
 80003a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003a4:	6193      	str	r3, [r2, #24]
 80003a6:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <SPI_Config+0x68>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003ae:	607b      	str	r3, [r7, #4]
	SPI_HandleStructure.Instance = SPI1; /* Tek tek registerları eşitlemektense böyle verilebilir */
 80003b0:	4b12      	ldr	r3, [pc, #72]	; (80003fc <SPI_Config+0x6c>)
 80003b2:	4a13      	ldr	r2, [pc, #76]	; (8000400 <SPI_Config+0x70>)
 80003b4:	601a      	str	r2, [r3, #0]
	SPI_HandleStructure.Init.BaudRate = SPI_BAUDRATE_DIV8;
 80003b6:	4b11      	ldr	r3, [pc, #68]	; (80003fc <SPI_Config+0x6c>)
 80003b8:	2210      	movs	r2, #16
 80003ba:	611a      	str	r2, [r3, #16]
	SPI_HandleStructure.Init.BusConfig = SPI_BUS_FullDuplex;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SPI_Config+0x6c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	619a      	str	r2, [r3, #24]
	SPI_HandleStructure.Init.CPHA = SPI_CPHA_FIRST;
 80003c2:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <SPI_Config+0x6c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
	SPI_HandleStructure.Init.CPOL = SPI_CPOL_LOW;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <SPI_Config+0x6c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]
	SPI_HandleStructure.Init.FrameFormat = SPI_FRAMEFORMAT_MSB;
 80003ce:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <SPI_Config+0x6c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	61da      	str	r2, [r3, #28]
	SPI_HandleStructure.Init.Mode = SPI_MODE_MASTER;
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <SPI_Config+0x6c>)
 80003d6:	2204      	movs	r2, #4
 80003d8:	605a      	str	r2, [r3, #4]
	SPI_HandleStructure.Init.SSM_Cmd = SPI_SSM_ENABLE;
 80003da:	4b08      	ldr	r3, [pc, #32]	; (80003fc <SPI_Config+0x6c>)
 80003dc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80003e0:	615a      	str	r2, [r3, #20]

	SPI_PeriphCmd(&SPI_HandleStructure, ENABLE);
 80003e2:	2101      	movs	r1, #1
 80003e4:	4805      	ldr	r0, [pc, #20]	; (80003fc <SPI_Config+0x6c>)
 80003e6:	f000 fa41 	bl	800086c <SPI_PeriphCmd>

	SPI_Init(&SPI_HandleStructure);
 80003ea:	4804      	ldr	r0, [pc, #16]	; (80003fc <SPI_Config+0x6c>)
 80003ec:	f000 fa13 	bl	8000816 <SPI_Init>

}
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40021000 	.word	0x40021000
 80003fc:	2000001c 	.word	0x2000001c
 8000400:	40013000 	.word	0x40013000

08000404 <SPI_GPIO_Config>:

static void SPI_GPIO_Config()
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 800040a:	2300      	movs	r3, #0
 800040c:	61fb      	str	r3, [r7, #28]
 800040e:	4b14      	ldr	r3, [pc, #80]	; (8000460 <SPI_GPIO_Config+0x5c>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	4a13      	ldr	r2, [pc, #76]	; (8000460 <SPI_GPIO_Config+0x5c>)
 8000414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000418:	6153      	str	r3, [r2, #20]
 800041a:	4b11      	ldr	r3, [pc, #68]	; (8000460 <SPI_GPIO_Config+0x5c>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000422:	61fb      	str	r3, [r7, #28]
	GPIO_InitTypeDef_t GPIO_InitStruct = { 0 };
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
 8000430:	611a      	str	r2, [r3, #16]
 8000432:	615a      	str	r2, [r3, #20]
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_7;
 8000434:	23a0      	movs	r3, #160	; 0xa0
 8000436:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF;
 8000438:	2302      	movs	r3, #2
 800043a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Otype = GPIO_OTYPE_PP;
 800043c:	2300      	movs	r3, #0
 800043e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.PuPd = GPIO_PUPD_NOPULL;
 8000440:	2300      	movs	r3, #0
 8000442:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_OSPEED_HIGH;
 8000444:	2303      	movs	r3, #3
 8000446:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF5;
 8000448:	2305      	movs	r3, #5
 800044a:	61bb      	str	r3, [r7, #24]

	GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	4619      	mov	r1, r3
 8000450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000454:	f000 f928 	bl	80006a8 <GPIO_Init>
}
 8000458:	bf00      	nop
 800045a:	3720      	adds	r7, #32
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40021000 	.word	0x40021000

08000464 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000464:	480d      	ldr	r0, [pc, #52]	; (800049c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000466:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000468:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800046c:	480c      	ldr	r0, [pc, #48]	; (80004a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800046e:	490d      	ldr	r1, [pc, #52]	; (80004a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000470:	4a0d      	ldr	r2, [pc, #52]	; (80004a8 <LoopForever+0xe>)
  movs r3, #0
 8000472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000474:	e002      	b.n	800047c <LoopCopyDataInit>

08000476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800047a:	3304      	adds	r3, #4

0800047c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800047c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800047e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000480:	d3f9      	bcc.n	8000476 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000482:	4a0a      	ldr	r2, [pc, #40]	; (80004ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000484:	4c0a      	ldr	r4, [pc, #40]	; (80004b0 <LoopForever+0x16>)
  movs r3, #0
 8000486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000488:	e001      	b.n	800048e <LoopFillZerobss>

0800048a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800048a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800048c:	3204      	adds	r2, #4

0800048e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800048e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000490:	d3fb      	bcc.n	800048a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000492:	f000 fa55 	bl	8000940 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000496:	f7ff fecd 	bl	8000234 <main>

0800049a <LoopForever>:

LoopForever:
  b LoopForever
 800049a:	e7fe      	b.n	800049a <LoopForever>
  ldr   r0, =_estack
 800049c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80004a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004a8:	080009b8 	.word	0x080009b8
  ldr r2, =_sbss
 80004ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004b0:	2000005c 	.word	0x2000005c

080004b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b4:	e7fe      	b.n	80004b4 <ADC1_2_IRQHandler>
	...

080004b8 <EXTI_LineConfig>:
  * @param  EXTI_LineSource = Pin Numbers & Line Numbers @def_group EXTI_LINE_Values
  *
  * @retval None
  */
void EXTI_LineConfig(uint8_t PortSource, uint8_t EXTI_LineSource)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	460a      	mov	r2, r1
 80004c2:	71fb      	strb	r3, [r7, #7]
 80004c4:	4613      	mov	r3, r2
 80004c6:	71bb      	strb	r3, [r7, #6]
	uint32_t tempValue;

	tempValue = SYSCFG->EXTICR[EXTI_LineSource >> 2U]; 		//Register'ı bulma
 80004c8:	4a14      	ldr	r2, [pc, #80]	; (800051c <EXTI_LineConfig+0x64>)
 80004ca:	79bb      	ldrb	r3, [r7, #6]
 80004cc:	089b      	lsrs	r3, r3, #2
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	3302      	adds	r3, #2
 80004d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004d6:	60fb      	str	r3, [r7, #12]
	tempValue &= ~(0xFU << (EXTI_LineSource & 0x3U) * 4);	//Registerdaki bitleri sıfırlama
 80004d8:	79bb      	ldrb	r3, [r7, #6]
 80004da:	f003 0303 	and.w	r3, r3, #3
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	220f      	movs	r2, #15
 80004e2:	fa02 f303 	lsl.w	r3, r2, r3
 80004e6:	43db      	mvns	r3, r3
 80004e8:	68fa      	ldr	r2, [r7, #12]
 80004ea:	4013      	ands	r3, r2
 80004ec:	60fb      	str	r3, [r7, #12]
	tempValue = (PortSource << (EXTI_LineSource & 0x3U) * 4);
 80004ee:	79fa      	ldrb	r2, [r7, #7]
 80004f0:	79bb      	ldrb	r3, [r7, #6]
 80004f2:	f003 0303 	and.w	r3, r3, #3
 80004f6:	009b      	lsls	r3, r3, #2
 80004f8:	fa02 f303 	lsl.w	r3, r2, r3
 80004fc:	60fb      	str	r3, [r7, #12]
	SYSCFG->EXTICR[EXTI_LineSource >> 2U] = tempValue;
 80004fe:	4907      	ldr	r1, [pc, #28]	; (800051c <EXTI_LineConfig+0x64>)
 8000500:	79bb      	ldrb	r3, [r7, #6]
 8000502:	089b      	lsrs	r3, r3, #2
 8000504:	b2db      	uxtb	r3, r3
 8000506:	3302      	adds	r3, #2
 8000508:	68fa      	ldr	r2, [r7, #12]
 800050a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800050e:	bf00      	nop
 8000510:	3714      	adds	r7, #20
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	40010000 	.word	0x40010000

08000520 <EXTI_Init>:
  * @param  EXTI_InitStruct = User Config structure
  *
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef_t *EXTI_InitStruct)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	uint32_t tempValue = 0;
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
	tempValue = (uint32_t)EXTI_BASE_ADDR;
 800052c:	4b43      	ldr	r3, [pc, #268]	; (800063c <EXTI_Init+0x11c>)
 800052e:	60fb      	str	r3, [r7, #12]

	EXTI->IMR1 &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000530:	4b42      	ldr	r3, [pc, #264]	; (800063c <EXTI_Init+0x11c>)
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	4619      	mov	r1, r3
 800053a:	2301      	movs	r3, #1
 800053c:	408b      	lsls	r3, r1
 800053e:	43db      	mvns	r3, r3
 8000540:	493e      	ldr	r1, [pc, #248]	; (800063c <EXTI_Init+0x11c>)
 8000542:	4013      	ands	r3, r2
 8000544:	600b      	str	r3, [r1, #0]
	EXTI->EMR1 &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000546:	4b3d      	ldr	r3, [pc, #244]	; (800063c <EXTI_Init+0x11c>)
 8000548:	685a      	ldr	r2, [r3, #4]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	4619      	mov	r1, r3
 8000550:	2301      	movs	r3, #1
 8000552:	408b      	lsls	r3, r1
 8000554:	43db      	mvns	r3, r3
 8000556:	4939      	ldr	r1, [pc, #228]	; (800063c <EXTI_Init+0x11c>)
 8000558:	4013      	ands	r3, r2
 800055a:	604b      	str	r3, [r1, #4]

	if(EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	78db      	ldrb	r3, [r3, #3]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d053      	beq.n	800060c <EXTI_Init+0xec>
	{
		tempValue += EXTI_InitStruct->EXTI_Mode;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	789b      	ldrb	r3, [r3, #2]
 8000568:	461a      	mov	r2, r3
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	4413      	add	r3, r2
 800056e:	60fb      	str	r3, [r7, #12]

		*((__IO uint32_t*)tempValue ) |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	6819      	ldr	r1, [r3, #0]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	461a      	mov	r2, r3
 800057a:	2301      	movs	r3, #1
 800057c:	fa03 f202 	lsl.w	r2, r3, r2
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	430a      	orrs	r2, r1
 8000584:	601a      	str	r2, [r3, #0]

		tempValue = (uint32_t)EXTI_BASE_ADDR;
 8000586:	4b2d      	ldr	r3, [pc, #180]	; (800063c <EXTI_Init+0x11c>)
 8000588:	60fb      	str	r3, [r7, #12]

		EXTI->RTSR1 &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 800058a:	4b2c      	ldr	r3, [pc, #176]	; (800063c <EXTI_Init+0x11c>)
 800058c:	689a      	ldr	r2, [r3, #8]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	4619      	mov	r1, r3
 8000594:	2301      	movs	r3, #1
 8000596:	408b      	lsls	r3, r1
 8000598:	43db      	mvns	r3, r3
 800059a:	4928      	ldr	r1, [pc, #160]	; (800063c <EXTI_Init+0x11c>)
 800059c:	4013      	ands	r3, r2
 800059e:	608b      	str	r3, [r1, #8]
		EXTI->FTSR1 &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80005a0:	4b26      	ldr	r3, [pc, #152]	; (800063c <EXTI_Init+0x11c>)
 80005a2:	68da      	ldr	r2, [r3, #12]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	4619      	mov	r1, r3
 80005aa:	2301      	movs	r3, #1
 80005ac:	408b      	lsls	r3, r1
 80005ae:	43db      	mvns	r3, r3
 80005b0:	4922      	ldr	r1, [pc, #136]	; (800063c <EXTI_Init+0x11c>)
 80005b2:	4013      	ands	r3, r2
 80005b4:	60cb      	str	r3, [r1, #12]

		if(EXTI_InitStruct->TriggerSelection == EXTI_Trigger_RF)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	785b      	ldrb	r3, [r3, #1]
 80005ba:	2b10      	cmp	r3, #16
 80005bc:	d114      	bne.n	80005e8 <EXTI_Init+0xc8>
		{
			EXTI->RTSR1 |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80005be:	4b1f      	ldr	r3, [pc, #124]	; (800063c <EXTI_Init+0x11c>)
 80005c0:	689a      	ldr	r2, [r3, #8]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	4619      	mov	r1, r3
 80005c8:	2301      	movs	r3, #1
 80005ca:	408b      	lsls	r3, r1
 80005cc:	491b      	ldr	r1, [pc, #108]	; (800063c <EXTI_Init+0x11c>)
 80005ce:	4313      	orrs	r3, r2
 80005d0:	608b      	str	r3, [r1, #8]
			EXTI->FTSR1 |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80005d2:	4b1a      	ldr	r3, [pc, #104]	; (800063c <EXTI_Init+0x11c>)
 80005d4:	68da      	ldr	r2, [r3, #12]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	4619      	mov	r1, r3
 80005dc:	2301      	movs	r3, #1
 80005de:	408b      	lsls	r3, r1
 80005e0:	4916      	ldr	r1, [pc, #88]	; (800063c <EXTI_Init+0x11c>)
 80005e2:	4313      	orrs	r3, r2
 80005e4:	60cb      	str	r3, [r1, #12]
	else
	{
		tempValue += EXTI_InitStruct->EXTI_Mode;
		*((__IO uint32_t*)tempValue ) &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
	}
}
 80005e6:	e022      	b.n	800062e <EXTI_Init+0x10e>
			tempValue += EXTI_InitStruct->TriggerSelection;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	785b      	ldrb	r3, [r3, #1]
 80005ec:	461a      	mov	r2, r3
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	4413      	add	r3, r2
 80005f2:	60fb      	str	r3, [r7, #12]
			*((__IO uint32_t*)tempValue) |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	6819      	ldr	r1, [r3, #0]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	461a      	mov	r2, r3
 80005fe:	2301      	movs	r3, #1
 8000600:	fa03 f202 	lsl.w	r2, r3, r2
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	430a      	orrs	r2, r1
 8000608:	601a      	str	r2, [r3, #0]
}
 800060a:	e010      	b.n	800062e <EXTI_Init+0x10e>
		tempValue += EXTI_InitStruct->EXTI_Mode;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	789b      	ldrb	r3, [r3, #2]
 8000610:	461a      	mov	r2, r3
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	4413      	add	r3, r2
 8000616:	60fb      	str	r3, [r7, #12]
		*((__IO uint32_t*)tempValue ) &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	6819      	ldr	r1, [r3, #0]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	461a      	mov	r2, r3
 8000622:	2301      	movs	r3, #1
 8000624:	4093      	lsls	r3, r2
 8000626:	43da      	mvns	r2, r3
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	400a      	ands	r2, r1
 800062c:	601a      	str	r2, [r3, #0]
}
 800062e:	bf00      	nop
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40010400 	.word	0x40010400

08000640 <NVIC_EnableInterrupt>:
  * @param  IRQNumber = IRQ Number of line
  *
  * @retval None
  */
void NVIC_EnableInterrupt(IRQNumber_TypeDef_t IRQNumber)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
	uint32_t tempValue = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]

	tempValue = *( (IRQNumber >> 5U ) + NVIC_ISER0 );
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	095b      	lsrs	r3, r3, #5
 8000652:	b2db      	uxtb	r3, r3
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800065a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	60fb      	str	r3, [r7, #12]
	tempValue &= ~(0x1U << (IRQNumber & 0x1FU) );
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	f003 031f 	and.w	r3, r3, #31
 8000668:	2201      	movs	r2, #1
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	43db      	mvns	r3, r3
 8000670:	68fa      	ldr	r2, [r7, #12]
 8000672:	4013      	ands	r3, r2
 8000674:	60fb      	str	r3, [r7, #12]
	tempValue |=  (0x1U << (IRQNumber & 0x1FU) );
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	f003 031f 	and.w	r3, r3, #31
 800067c:	2201      	movs	r2, #1
 800067e:	fa02 f303 	lsl.w	r3, r2, r3
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	4313      	orrs	r3, r2
 8000686:	60fb      	str	r3, [r7, #12]
	*( (IRQNumber >> 5U ) + NVIC_ISER0 ) = tempValue;
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	095b      	lsrs	r3, r3, #5
 800068c:	b2db      	uxtb	r3, r3
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000694:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000698:	68fa      	ldr	r2, [r7, #12]
 800069a:	601a      	str	r2, [r3, #0]
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <GPIO_Init>:
 *
 *  @retval None
 */

void GPIO_Init(GPIO_TypeDef_t *GPIOx, GPIO_InitTypeDef_t *GPIO_ConfigStruct)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b087      	sub	sp, #28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t fakePosition = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
	uint32_t lastPosition = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
	for(position = 0; position < GPIO_MAX_PIN_POSITION; position++)
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
 80006be:	e09f      	b.n	8000800 <GPIO_Init+0x158>
	{
		fakePosition = (0x1U << position);
 80006c0:	2201      	movs	r2, #1
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	fa02 f303 	lsl.w	r3, r2, r3
 80006c8:	613b      	str	r3, [r7, #16]
		lastPosition = (uint32_t)(GPIO_ConfigStruct->Pin) & fakePosition;
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	693a      	ldr	r2, [r7, #16]
 80006d0:	4013      	ands	r3, r2
 80006d2:	60fb      	str	r3, [r7, #12]
		if(fakePosition == lastPosition)
 80006d4:	693a      	ldr	r2, [r7, #16]
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	429a      	cmp	r2, r3
 80006da:	f040 808e 	bne.w	80007fa <GPIO_Init+0x152>
		{
			/* MODE Config */
			uint32_t tempValue = GPIOx->MODER;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	60bb      	str	r3, [r7, #8]
			tempValue &= ~(0x3U << (position * 2));
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	2203      	movs	r2, #3
 80006ea:	fa02 f303 	lsl.w	r3, r2, r3
 80006ee:	43db      	mvns	r3, r3
 80006f0:	68ba      	ldr	r2, [r7, #8]
 80006f2:	4013      	ands	r3, r2
 80006f4:	60bb      	str	r3, [r7, #8]
			tempValue |= GPIO_ConfigStruct->Mode << (position * 2);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	685a      	ldr	r2, [r3, #4]
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	4313      	orrs	r3, r2
 8000706:	60bb      	str	r3, [r7, #8]
			GPIOx->MODER = tempValue;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	68ba      	ldr	r2, [r7, #8]
 800070c:	601a      	str	r2, [r3, #0]

			if(GPIO_ConfigStruct->Mode == GPIO_MODE_OUTPUT || GPIO_ConfigStruct->Mode == GPIO_MODE_AF)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d003      	beq.n	800071e <GPIO_Init+0x76>
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	2b02      	cmp	r3, #2
 800071c:	d12d      	bne.n	800077a <GPIO_Init+0xd2>
			{
				/* OTYPE Config */
				tempValue = GPIOx->OTYPER;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0x1U << position);
 8000724:	2201      	movs	r2, #1
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	fa02 f303 	lsl.w	r3, r2, r3
 800072c:	43db      	mvns	r3, r3
 800072e:	68ba      	ldr	r2, [r7, #8]
 8000730:	4013      	ands	r3, r2
 8000732:	60bb      	str	r3, [r7, #8]
				tempValue |= GPIO_ConfigStruct->Otype << position;
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	689a      	ldr	r2, [r3, #8]
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
 800073e:	68ba      	ldr	r2, [r7, #8]
 8000740:	4313      	orrs	r3, r2
 8000742:	60bb      	str	r3, [r7, #8]
				GPIOx->OTYPER = tempValue;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	68ba      	ldr	r2, [r7, #8]
 8000748:	605a      	str	r2, [r3, #4]

				/* OSPEED Config */
				tempValue = GPIOx->OSPEEDR;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	689b      	ldr	r3, [r3, #8]
 800074e:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0x3U << (position * 2));
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	2203      	movs	r2, #3
 8000756:	fa02 f303 	lsl.w	r3, r2, r3
 800075a:	43db      	mvns	r3, r3
 800075c:	68ba      	ldr	r2, [r7, #8]
 800075e:	4013      	ands	r3, r2
 8000760:	60bb      	str	r3, [r7, #8]
				tempValue |= GPIO_ConfigStruct->Speed << (position * 2);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	68da      	ldr	r2, [r3, #12]
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	68ba      	ldr	r2, [r7, #8]
 8000770:	4313      	orrs	r3, r2
 8000772:	60bb      	str	r3, [r7, #8]
				GPIOx->OSPEEDR = tempValue;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	609a      	str	r2, [r3, #8]

			}
			/* Push Pull Config */
			tempValue = GPIOx->PUPDR;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	68db      	ldr	r3, [r3, #12]
 800077e:	60bb      	str	r3, [r7, #8]
			tempValue &= ~(0x3U << (position * 2));
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	2203      	movs	r2, #3
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	43db      	mvns	r3, r3
 800078c:	68ba      	ldr	r2, [r7, #8]
 800078e:	4013      	ands	r3, r2
 8000790:	60bb      	str	r3, [r7, #8]
			tempValue |= GPIO_ConfigStruct->PuPd << (position * 2);
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	691a      	ldr	r2, [r3, #16]
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	fa02 f303 	lsl.w	r3, r2, r3
 800079e:	68ba      	ldr	r2, [r7, #8]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	60bb      	str	r3, [r7, #8]
			GPIOx->PUPDR = tempValue;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	68ba      	ldr	r2, [r7, #8]
 80007a8:	60da      	str	r2, [r3, #12]

			if(GPIO_ConfigStruct->Mode == GPIO_MODE_AF)
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d123      	bne.n	80007fa <GPIO_Init+0x152>
			{
				tempValue = GPIOx->AFR[position >> 3U]; //8'e bölme
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	08da      	lsrs	r2, r3, #3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	3208      	adds	r2, #8
 80007ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007be:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0xFU << ( (position & 0x7U) * 4 ) ); //8'e mod alma
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	220f      	movs	r2, #15
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	43db      	mvns	r3, r3
 80007d0:	68ba      	ldr	r2, [r7, #8]
 80007d2:	4013      	ands	r3, r2
 80007d4:	60bb      	str	r3, [r7, #8]
				tempValue |= (GPIO_ConfigStruct->Alternate << ( (position & 0x7U) * 4 ) );
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	695a      	ldr	r2, [r3, #20]
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	f003 0307 	and.w	r3, r3, #7
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	fa02 f303 	lsl.w	r3, r2, r3
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	60bb      	str	r3, [r7, #8]
				GPIOx->AFR[position >> 3U] = tempValue;
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	08da      	lsrs	r2, r3, #3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3208      	adds	r2, #8
 80007f4:	68b9      	ldr	r1, [r7, #8]
 80007f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(position = 0; position < GPIO_MAX_PIN_POSITION; position++)
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	3301      	adds	r3, #1
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	2b0f      	cmp	r3, #15
 8000804:	f67f af5c 	bls.w	80006c0 <GPIO_Init+0x18>
			}
		}
	}
}
 8000808:	bf00      	nop
 800080a:	bf00      	nop
 800080c:	371c      	adds	r7, #28
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <SPI_Init>:
 *  @retval None
 */


void SPI_Init(SPI_HandleTypeDef_t *SPI_Handle)
{
 8000816:	b480      	push	{r7}
 8000818:	b085      	sub	sp, #20
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
	uint32_t tempValue = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]

	tempValue = SPI_Handle->Instance->CR1;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	60fb      	str	r3, [r7, #12]
	tempValue |= (SPI_Handle->Init.BaudRate) | (SPI_Handle->Init.CPHA) | (SPI_Handle->Init.CPOL) | \
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	691a      	ldr	r2, [r3, #16]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	431a      	orrs	r2, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	431a      	orrs	r2, r3
				 (SPI_Handle->Init.Mode) | (SPI_Handle->Init.FrameFormat) | (SPI_Handle->Init.BusConfig) | (SPI_Handle->Init.SSM_Cmd);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	685b      	ldr	r3, [r3, #4]
	tempValue |= (SPI_Handle->Init.BaudRate) | (SPI_Handle->Init.CPHA) | (SPI_Handle->Init.CPOL) | \
 800083e:	431a      	orrs	r2, r3
				 (SPI_Handle->Init.Mode) | (SPI_Handle->Init.FrameFormat) | (SPI_Handle->Init.BusConfig) | (SPI_Handle->Init.SSM_Cmd);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	69db      	ldr	r3, [r3, #28]
 8000844:	431a      	orrs	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	431a      	orrs	r2, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	695b      	ldr	r3, [r3, #20]
 8000850:	4313      	orrs	r3, r2
	tempValue |= (SPI_Handle->Init.BaudRate) | (SPI_Handle->Init.CPHA) | (SPI_Handle->Init.CPOL) | \
 8000852:	68fa      	ldr	r2, [r7, #12]
 8000854:	4313      	orrs	r3, r2
 8000856:	60fb      	str	r3, [r7, #12]

	SPI_Handle->Instance->CR1 = tempValue;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	68fa      	ldr	r2, [r7, #12]
 800085e:	601a      	str	r2, [r3, #0]
}
 8000860:	bf00      	nop
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <SPI_PeriphCmd>:
 *
 *  @retval None
 */

void SPI_PeriphCmd(SPI_HandleTypeDef_t *SPI_Handle, FunctionalState_t stateOfSPI)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	460b      	mov	r3, r1
 8000876:	70fb      	strb	r3, [r7, #3]
	if(stateOfSPI == ENABLE)
 8000878:	78fb      	ldrb	r3, [r7, #3]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d108      	bne.n	8000890 <SPI_PeriphCmd+0x24>
	{
		SPI_Handle->Instance->CR1 |= (0x1U << SPI_CR1_SPE);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800088c:	601a      	str	r2, [r3, #0]
	else
	{
		SPI_Handle->Instance->CR1 &= ~(0x1U << SPI_CR1_SPE);
	}

}
 800088e:	e007      	b.n	80008a0 <SPI_PeriphCmd+0x34>
		SPI_Handle->Instance->CR1 &= ~(0x1U << SPI_CR1_SPE);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800089e:	601a      	str	r2, [r3, #0]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <SPI_TransmitData>:
 *	@param sizeOfData = Length of your data in bytes
 *
 *  @retval None
 */
void SPI_TransmitData(SPI_HandleTypeDef_t *SPI_Handle, uint8_t *pData, uint16_t sizeOfData)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	4613      	mov	r3, r2
 80008b8:	80fb      	strh	r3, [r7, #6]
	while(sizeOfData > 0)
 80008ba:	e011      	b.n	80008e0 <SPI_TransmitData+0x34>
	{
		if( SPI_GetFlagStatus(SPI_Handle, SPI_TXE_FLAG) )
 80008bc:	2102      	movs	r1, #2
 80008be:	68f8      	ldr	r0, [r7, #12]
 80008c0:	f000 f820 	bl	8000904 <SPI_GetFlagStatus>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d00a      	beq.n	80008e0 <SPI_TransmitData+0x34>
		{
			SPI_Handle->Instance->DR = *pData;
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	781a      	ldrb	r2, [r3, #0]
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	60da      	str	r2, [r3, #12]
			pData++;
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	3301      	adds	r3, #1
 80008d8:	60bb      	str	r3, [r7, #8]
			sizeOfData--;
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	3b01      	subs	r3, #1
 80008de:	80fb      	strh	r3, [r7, #6]
	while(sizeOfData > 0)
 80008e0:	88fb      	ldrh	r3, [r7, #6]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d1ea      	bne.n	80008bc <SPI_TransmitData+0x10>
		}
	}
	while( SPI_GetFlagStatus(SPI_Handle, SPI_BSY_FLAG) & 1); //Wait for busy flag
 80008e6:	bf00      	nop
 80008e8:	2180      	movs	r1, #128	; 0x80
 80008ea:	68f8      	ldr	r0, [r7, #12]
 80008ec:	f000 f80a 	bl	8000904 <SPI_GetFlagStatus>
 80008f0:	4603      	mov	r3, r0
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d1f6      	bne.n	80008e8 <SPI_TransmitData+0x3c>
}
 80008fa:	bf00      	nop
 80008fc:	bf00      	nop
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <SPI_GetFlagStatus>:
 *	@param  SPI_FLag = Flag name of SR register
 *
 *  @retval FlagStatus_t
 */
FlagStatus_t SPI_GetFlagStatus(SPI_HandleTypeDef_t *SPI_Handle, uint16_t SPI_Flag)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	807b      	strh	r3, [r7, #2]
	return (SPI_Handle->Instance->SR & SPI_Flag) ? FLAG_SET : FLAG_RESET;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	689a      	ldr	r2, [r3, #8]
 8000916:	887b      	ldrh	r3, [r7, #2]
 8000918:	4013      	ands	r3, r2
 800091a:	2b00      	cmp	r3, #0
 800091c:	bf14      	ite	ne
 800091e:	2301      	movne	r3, #1
 8000920:	2300      	moveq	r3, #0
 8000922:	b2db      	uxtb	r3, r3
}
 8000924:	4618      	mov	r0, r3
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <memset>:
 8000930:	4402      	add	r2, r0
 8000932:	4603      	mov	r3, r0
 8000934:	4293      	cmp	r3, r2
 8000936:	d100      	bne.n	800093a <memset+0xa>
 8000938:	4770      	bx	lr
 800093a:	f803 1b01 	strb.w	r1, [r3], #1
 800093e:	e7f9      	b.n	8000934 <memset+0x4>

08000940 <__libc_init_array>:
 8000940:	b570      	push	{r4, r5, r6, lr}
 8000942:	4d0d      	ldr	r5, [pc, #52]	; (8000978 <__libc_init_array+0x38>)
 8000944:	4c0d      	ldr	r4, [pc, #52]	; (800097c <__libc_init_array+0x3c>)
 8000946:	1b64      	subs	r4, r4, r5
 8000948:	10a4      	asrs	r4, r4, #2
 800094a:	2600      	movs	r6, #0
 800094c:	42a6      	cmp	r6, r4
 800094e:	d109      	bne.n	8000964 <__libc_init_array+0x24>
 8000950:	4d0b      	ldr	r5, [pc, #44]	; (8000980 <__libc_init_array+0x40>)
 8000952:	4c0c      	ldr	r4, [pc, #48]	; (8000984 <__libc_init_array+0x44>)
 8000954:	f000 f818 	bl	8000988 <_init>
 8000958:	1b64      	subs	r4, r4, r5
 800095a:	10a4      	asrs	r4, r4, #2
 800095c:	2600      	movs	r6, #0
 800095e:	42a6      	cmp	r6, r4
 8000960:	d105      	bne.n	800096e <__libc_init_array+0x2e>
 8000962:	bd70      	pop	{r4, r5, r6, pc}
 8000964:	f855 3b04 	ldr.w	r3, [r5], #4
 8000968:	4798      	blx	r3
 800096a:	3601      	adds	r6, #1
 800096c:	e7ee      	b.n	800094c <__libc_init_array+0xc>
 800096e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000972:	4798      	blx	r3
 8000974:	3601      	adds	r6, #1
 8000976:	e7f2      	b.n	800095e <__libc_init_array+0x1e>
 8000978:	080009b0 	.word	0x080009b0
 800097c:	080009b0 	.word	0x080009b0
 8000980:	080009b0 	.word	0x080009b0
 8000984:	080009b4 	.word	0x080009b4

08000988 <_init>:
 8000988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800098a:	bf00      	nop
 800098c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800098e:	bc08      	pop	{r3}
 8000990:	469e      	mov	lr, r3
 8000992:	4770      	bx	lr

08000994 <_fini>:
 8000994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000996:	bf00      	nop
 8000998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800099a:	bc08      	pop	{r3}
 800099c:	469e      	mov	lr, r3
 800099e:	4770      	bx	lr
