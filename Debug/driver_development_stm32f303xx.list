
driver_development_stm32f303xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009ac  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000b40  08000b40  00010b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b70  08000b70  00010b78  2**0
                  CONTENTS
  4 .ARM          00000000  08000b70  08000b70  00010b78  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b70  08000b78  00010b78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b70  08000b70  00010b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b74  08000b74  00010b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010b78  2**0
                  CONTENTS
 10 .bss          00000054  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000054  20000054  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010b78  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010ba8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001686  00000000  00000000  00010beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000006ae  00000000  00000000  00012271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000190  00000000  00000000  00012920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000114  00000000  00000000  00012ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002a50  00000000  00000000  00012bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002737  00000000  00000000  00015614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000aa3e  00000000  00000000  00017d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000004e8  00000000  00000000  0002278c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  00022c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000b28 	.word	0x08000b28

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000b28 	.word	0x08000b28

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <USART3_EXTI28_IRQHandler>:

static void GPIO_Config();
static void UART_Config(void);

void USART3_EXTI28_IRQHandler()
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	USART_InterruptHandler(&USART_Handle);
 80001e8:	4802      	ldr	r0, [pc, #8]	; (80001f4 <USART3_EXTI28_IRQHandler+0x10>)
 80001ea:	f000 fc39 	bl	8000a60 <USART_InterruptHandler>
}
 80001ee:	bf00      	nop
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	2000001c 	.word	0x2000001c

080001f8 <main>:

int main(void)
{
 80001f8:	b5b0      	push	{r4, r5, r7, lr}
 80001fa:	b08c      	sub	sp, #48	; 0x30
 80001fc:	af00      	add	r7, sp, #0
	char msgToSend[] = "Hey bro how are you?\n\r";
 80001fe:	4b17      	ldr	r3, [pc, #92]	; (800025c <main+0x64>)
 8000200:	f107 0418 	add.w	r4, r7, #24
 8000204:	461d      	mov	r5, r3
 8000206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800020a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800020e:	6020      	str	r0, [r4, #0]
 8000210:	3404      	adds	r4, #4
 8000212:	8021      	strh	r1, [r4, #0]
 8000214:	3402      	adds	r4, #2
 8000216:	0c0b      	lsrs	r3, r1, #16
 8000218:	7023      	strb	r3, [r4, #0]
	char msgFromReceive[20] = {0};
 800021a:	2300      	movs	r3, #0
 800021c:	607b      	str	r3, [r7, #4]
 800021e:	f107 0308 	add.w	r3, r7, #8
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]

	GPIO_Config();
 800022c:	f000 f858 	bl	80002e0 <GPIO_Config>
	UART_Config();
 8000230:	f000 f818 	bl	8000264 <UART_Config>

	USART_TransmitData_IT(&USART_Handle, (uint8_t*)msgToSend, strlen(msgToSend));
 8000234:	f107 0318 	add.w	r3, r7, #24
 8000238:	4618      	mov	r0, r3
 800023a:	f7ff ffcb 	bl	80001d4 <strlen>
 800023e:	4603      	mov	r3, r0
 8000240:	b29a      	uxth	r2, r3
 8000242:	f107 0318 	add.w	r3, r7, #24
 8000246:	4619      	mov	r1, r3
 8000248:	4805      	ldr	r0, [pc, #20]	; (8000260 <main+0x68>)
 800024a:	f000 fb95 	bl	8000978 <USART_TransmitData_IT>
	USART_ReceiveData_IT(&USART_Handle, (uint8_t*)msgFromReceive, 20);
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	2214      	movs	r2, #20
 8000252:	4619      	mov	r1, r3
 8000254:	4802      	ldr	r0, [pc, #8]	; (8000260 <main+0x68>)
 8000256:	f000 fbc9 	bl	80009ec <USART_ReceiveData_IT>
	//USART_ReceiveData(&USART_Handle, (uint8_t*)msgToSend, 12);
	//USART_TransmitData(&USART_Handle, (uint8_t*)msgToSend, strlen(msgToSend));

	while(1);
 800025a:	e7fe      	b.n	800025a <main+0x62>
 800025c:	08000b40 	.word	0x08000b40
 8000260:	2000001c 	.word	0x2000001c

08000264 <UART_Config>:
}

static void UART_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
	RCC_USART3_CLK_EN();
 800026a:	2300      	movs	r3, #0
 800026c:	607b      	str	r3, [r7, #4]
 800026e:	4b19      	ldr	r3, [pc, #100]	; (80002d4 <UART_Config+0x70>)
 8000270:	69db      	ldr	r3, [r3, #28]
 8000272:	4a18      	ldr	r2, [pc, #96]	; (80002d4 <UART_Config+0x70>)
 8000274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000278:	61d3      	str	r3, [r2, #28]
 800027a:	4b16      	ldr	r3, [pc, #88]	; (80002d4 <UART_Config+0x70>)
 800027c:	69db      	ldr	r3, [r3, #28]
 800027e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000282:	607b      	str	r3, [r7, #4]

	USART_Handle.Instance = USART3;
 8000284:	4b14      	ldr	r3, [pc, #80]	; (80002d8 <UART_Config+0x74>)
 8000286:	4a15      	ldr	r2, [pc, #84]	; (80002dc <UART_Config+0x78>)
 8000288:	601a      	str	r2, [r3, #0]
	USART_Handle.Init.BaudRate = 115200;
 800028a:	4b13      	ldr	r3, [pc, #76]	; (80002d8 <UART_Config+0x74>)
 800028c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000290:	609a      	str	r2, [r3, #8]
	USART_Handle.Init.HardwareFlowControl = USART_HW_NONE;
 8000292:	4b11      	ldr	r3, [pc, #68]	; (80002d8 <UART_Config+0x74>)
 8000294:	2200      	movs	r2, #0
 8000296:	61da      	str	r2, [r3, #28]
	USART_Handle.Init.Mode = USART_MODE_TX_RX;
 8000298:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <UART_Config+0x74>)
 800029a:	220c      	movs	r2, #12
 800029c:	605a      	str	r2, [r3, #4]
	USART_Handle.Init.OverSampling = USART_OVERSAMPLE_16;
 800029e:	4b0e      	ldr	r3, [pc, #56]	; (80002d8 <UART_Config+0x74>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	619a      	str	r2, [r3, #24]
	USART_Handle.Init.Parity = USART_PARITY_NONE;
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <UART_Config+0x74>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	611a      	str	r2, [r3, #16]
	USART_Handle.Init.StopBits = USART_STOPBITS_1;
 80002aa:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <UART_Config+0x74>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	615a      	str	r2, [r3, #20]
	USART_Handle.Init.WordLength = USART_WORDLENGTH_8Bits;
 80002b0:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <UART_Config+0x74>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	60da      	str	r2, [r3, #12]

	USART_Init(&USART_Handle);
 80002b6:	4808      	ldr	r0, [pc, #32]	; (80002d8 <UART_Config+0x74>)
 80002b8:	f000 fae0 	bl	800087c <USART_Init>
	NVIC_EnableInterrupt(USART3_IRQNumber);
 80002bc:	2027      	movs	r0, #39	; 0x27
 80002be:	f000 f86a 	bl	8000396 <NVIC_EnableInterrupt>
	USART_PeriphCmd(&USART_Handle, ENABLE);
 80002c2:	2101      	movs	r1, #1
 80002c4:	4804      	ldr	r0, [pc, #16]	; (80002d8 <UART_Config+0x74>)
 80002c6:	f000 fab8 	bl	800083a <USART_PeriphCmd>
}
 80002ca:	bf00      	nop
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40021000 	.word	0x40021000
 80002d8:	2000001c 	.word	0x2000001c
 80002dc:	40004800 	.word	0x40004800

080002e0 <GPIO_Config>:

static void GPIO_Config(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b088      	sub	sp, #32
 80002e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef_t GPIO_InitStructB = {0};
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
 80002f2:	611a      	str	r2, [r3, #16]
 80002f4:	615a      	str	r2, [r3, #20]

	RCC_GPIOB_CLK_EN();
 80002f6:	2300      	movs	r3, #0
 80002f8:	61fb      	str	r3, [r7, #28]
 80002fa:	4b10      	ldr	r3, [pc, #64]	; (800033c <GPIO_Config+0x5c>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a0f      	ldr	r2, [pc, #60]	; (800033c <GPIO_Config+0x5c>)
 8000300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b0d      	ldr	r3, [pc, #52]	; (800033c <GPIO_Config+0x5c>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800030e:	61fb      	str	r3, [r7, #28]

	GPIO_InitStructB.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 8000310:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000314:	607b      	str	r3, [r7, #4]
	GPIO_InitStructB.Mode = GPIO_MODE_AF;
 8000316:	2302      	movs	r3, #2
 8000318:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructB.Otype = GPIO_OTYPE_PP;
 800031a:	2300      	movs	r3, #0
 800031c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructB.PuPd = GPIO_PUPD_NOPULL;
 800031e:	2300      	movs	r3, #0
 8000320:	617b      	str	r3, [r7, #20]
	GPIO_InitStructB.Speed = GPIO_OSPEED_HIGH;
 8000322:	2303      	movs	r3, #3
 8000324:	613b      	str	r3, [r7, #16]
	GPIO_InitStructB.Alternate = GPIO_AF7;
 8000326:	2307      	movs	r3, #7
 8000328:	61bb      	str	r3, [r7, #24]

	GPIO_Init(GPIOB, &GPIO_InitStructB);
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	4619      	mov	r1, r3
 800032e:	4804      	ldr	r0, [pc, #16]	; (8000340 <GPIO_Config+0x60>)
 8000330:	f000 f865 	bl	80003fe <GPIO_Init>
}
 8000334:	bf00      	nop
 8000336:	3720      	adds	r7, #32
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	40021000 	.word	0x40021000
 8000340:	48000400 	.word	0x48000400

08000344 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000344:	480d      	ldr	r0, [pc, #52]	; (800037c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000346:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000348:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800034c:	480c      	ldr	r0, [pc, #48]	; (8000380 <LoopForever+0x6>)
  ldr r1, =_edata
 800034e:	490d      	ldr	r1, [pc, #52]	; (8000384 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000350:	4a0d      	ldr	r2, [pc, #52]	; (8000388 <LoopForever+0xe>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000354:	e002      	b.n	800035c <LoopCopyDataInit>

08000356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035a:	3304      	adds	r3, #4

0800035c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800035c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000360:	d3f9      	bcc.n	8000356 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000362:	4a0a      	ldr	r2, [pc, #40]	; (800038c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000364:	4c0a      	ldr	r4, [pc, #40]	; (8000390 <LoopForever+0x16>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000368:	e001      	b.n	800036e <LoopFillZerobss>

0800036a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800036c:	3204      	adds	r2, #4

0800036e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000370:	d3fb      	bcc.n	800036a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000372:	f000 fbb5 	bl	8000ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000376:	f7ff ff3f 	bl	80001f8 <main>

0800037a <LoopForever>:

LoopForever:
  b LoopForever
 800037a:	e7fe      	b.n	800037a <LoopForever>
  ldr   r0, =_estack
 800037c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000384:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000388:	08000b78 	.word	0x08000b78
  ldr r2, =_sbss
 800038c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000390:	20000054 	.word	0x20000054

08000394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000394:	e7fe      	b.n	8000394 <ADC1_2_IRQHandler>

08000396 <NVIC_EnableInterrupt>:
  * @param  IRQNumber = IRQ Number of line
  *
  * @retval None
  */
void NVIC_EnableInterrupt(IRQNumber_TypeDef_t IRQNumber)
{
 8000396:	b480      	push	{r7}
 8000398:	b085      	sub	sp, #20
 800039a:	af00      	add	r7, sp, #0
 800039c:	4603      	mov	r3, r0
 800039e:	71fb      	strb	r3, [r7, #7]
	uint32_t tempValue = 0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	60fb      	str	r3, [r7, #12]

	tempValue = *( (IRQNumber >> 5U ) + NVIC_ISER0 );
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	095b      	lsrs	r3, r3, #5
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	009b      	lsls	r3, r3, #2
 80003ac:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80003b0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	60fb      	str	r3, [r7, #12]
	tempValue &= ~(0x1U << (IRQNumber & 0x1FU) );
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	f003 031f 	and.w	r3, r3, #31
 80003be:	2201      	movs	r2, #1
 80003c0:	fa02 f303 	lsl.w	r3, r2, r3
 80003c4:	43db      	mvns	r3, r3
 80003c6:	68fa      	ldr	r2, [r7, #12]
 80003c8:	4013      	ands	r3, r2
 80003ca:	60fb      	str	r3, [r7, #12]
	tempValue |=  (0x1U << (IRQNumber & 0x1FU) );
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	f003 031f 	and.w	r3, r3, #31
 80003d2:	2201      	movs	r2, #1
 80003d4:	fa02 f303 	lsl.w	r3, r2, r3
 80003d8:	68fa      	ldr	r2, [r7, #12]
 80003da:	4313      	orrs	r3, r2
 80003dc:	60fb      	str	r3, [r7, #12]
	*( (IRQNumber >> 5U ) + NVIC_ISER0 ) = tempValue;
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	095b      	lsrs	r3, r3, #5
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80003ea:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80003ee:	68fa      	ldr	r2, [r7, #12]
 80003f0:	601a      	str	r2, [r3, #0]
}
 80003f2:	bf00      	nop
 80003f4:	3714      	adds	r7, #20
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <GPIO_Init>:
 *
 *  @retval None
 */

void GPIO_Init(GPIO_TypeDef_t *GPIOx, GPIO_InitTypeDef_t *GPIO_ConfigStruct)
{
 80003fe:	b480      	push	{r7}
 8000400:	b087      	sub	sp, #28
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
 8000406:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t fakePosition = 0;
 8000408:	2300      	movs	r3, #0
 800040a:	613b      	str	r3, [r7, #16]
	uint32_t lastPosition = 0;
 800040c:	2300      	movs	r3, #0
 800040e:	60fb      	str	r3, [r7, #12]
	for(position = 0; position < GPIO_MAX_PIN_POSITION; position++)
 8000410:	2300      	movs	r3, #0
 8000412:	617b      	str	r3, [r7, #20]
 8000414:	e09f      	b.n	8000556 <GPIO_Init+0x158>
	{
		fakePosition = (0x1U << position);
 8000416:	2201      	movs	r2, #1
 8000418:	697b      	ldr	r3, [r7, #20]
 800041a:	fa02 f303 	lsl.w	r3, r2, r3
 800041e:	613b      	str	r3, [r7, #16]
		lastPosition = (uint32_t)(GPIO_ConfigStruct->Pin) & fakePosition;
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	693a      	ldr	r2, [r7, #16]
 8000426:	4013      	ands	r3, r2
 8000428:	60fb      	str	r3, [r7, #12]
		if(fakePosition == lastPosition)
 800042a:	693a      	ldr	r2, [r7, #16]
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	429a      	cmp	r2, r3
 8000430:	f040 808e 	bne.w	8000550 <GPIO_Init+0x152>
		{
			/* MODE Config */
			uint32_t tempValue = GPIOx->MODER;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	60bb      	str	r3, [r7, #8]
			tempValue &= ~(0x3U << (position * 2));
 800043a:	697b      	ldr	r3, [r7, #20]
 800043c:	005b      	lsls	r3, r3, #1
 800043e:	2203      	movs	r2, #3
 8000440:	fa02 f303 	lsl.w	r3, r2, r3
 8000444:	43db      	mvns	r3, r3
 8000446:	68ba      	ldr	r2, [r7, #8]
 8000448:	4013      	ands	r3, r2
 800044a:	60bb      	str	r3, [r7, #8]
			tempValue |= GPIO_ConfigStruct->Mode << (position * 2);
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	685a      	ldr	r2, [r3, #4]
 8000450:	697b      	ldr	r3, [r7, #20]
 8000452:	005b      	lsls	r3, r3, #1
 8000454:	fa02 f303 	lsl.w	r3, r2, r3
 8000458:	68ba      	ldr	r2, [r7, #8]
 800045a:	4313      	orrs	r3, r2
 800045c:	60bb      	str	r3, [r7, #8]
			GPIOx->MODER = tempValue;
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	68ba      	ldr	r2, [r7, #8]
 8000462:	601a      	str	r2, [r3, #0]

			if(GPIO_ConfigStruct->Mode == GPIO_MODE_OUTPUT || GPIO_ConfigStruct->Mode == GPIO_MODE_AF)
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	685b      	ldr	r3, [r3, #4]
 8000468:	2b01      	cmp	r3, #1
 800046a:	d003      	beq.n	8000474 <GPIO_Init+0x76>
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	685b      	ldr	r3, [r3, #4]
 8000470:	2b02      	cmp	r3, #2
 8000472:	d12d      	bne.n	80004d0 <GPIO_Init+0xd2>
			{
				/* OTYPE Config */
				tempValue = GPIOx->OTYPER;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	685b      	ldr	r3, [r3, #4]
 8000478:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0x1U << position);
 800047a:	2201      	movs	r2, #1
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	fa02 f303 	lsl.w	r3, r2, r3
 8000482:	43db      	mvns	r3, r3
 8000484:	68ba      	ldr	r2, [r7, #8]
 8000486:	4013      	ands	r3, r2
 8000488:	60bb      	str	r3, [r7, #8]
				tempValue |= GPIO_ConfigStruct->Otype << position;
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	689a      	ldr	r2, [r3, #8]
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	fa02 f303 	lsl.w	r3, r2, r3
 8000494:	68ba      	ldr	r2, [r7, #8]
 8000496:	4313      	orrs	r3, r2
 8000498:	60bb      	str	r3, [r7, #8]
				GPIOx->OTYPER = tempValue;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	68ba      	ldr	r2, [r7, #8]
 800049e:	605a      	str	r2, [r3, #4]

				/* OSPEED Config */
				tempValue = GPIOx->OSPEEDR;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0x3U << (position * 2));
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	2203      	movs	r2, #3
 80004ac:	fa02 f303 	lsl.w	r3, r2, r3
 80004b0:	43db      	mvns	r3, r3
 80004b2:	68ba      	ldr	r2, [r7, #8]
 80004b4:	4013      	ands	r3, r2
 80004b6:	60bb      	str	r3, [r7, #8]
				tempValue |= GPIO_ConfigStruct->Speed << (position * 2);
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	68da      	ldr	r2, [r3, #12]
 80004bc:	697b      	ldr	r3, [r7, #20]
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	fa02 f303 	lsl.w	r3, r2, r3
 80004c4:	68ba      	ldr	r2, [r7, #8]
 80004c6:	4313      	orrs	r3, r2
 80004c8:	60bb      	str	r3, [r7, #8]
				GPIOx->OSPEEDR = tempValue;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	68ba      	ldr	r2, [r7, #8]
 80004ce:	609a      	str	r2, [r3, #8]

			}
			/* Push Pull Config */
			tempValue = GPIOx->PUPDR;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	60bb      	str	r3, [r7, #8]
			tempValue &= ~(0x3U << (position * 2));
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	005b      	lsls	r3, r3, #1
 80004da:	2203      	movs	r2, #3
 80004dc:	fa02 f303 	lsl.w	r3, r2, r3
 80004e0:	43db      	mvns	r3, r3
 80004e2:	68ba      	ldr	r2, [r7, #8]
 80004e4:	4013      	ands	r3, r2
 80004e6:	60bb      	str	r3, [r7, #8]
			tempValue |= GPIO_ConfigStruct->PuPd << (position * 2);
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	691a      	ldr	r2, [r3, #16]
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	fa02 f303 	lsl.w	r3, r2, r3
 80004f4:	68ba      	ldr	r2, [r7, #8]
 80004f6:	4313      	orrs	r3, r2
 80004f8:	60bb      	str	r3, [r7, #8]
			GPIOx->PUPDR = tempValue;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	68ba      	ldr	r2, [r7, #8]
 80004fe:	60da      	str	r2, [r3, #12]

			if(GPIO_ConfigStruct->Mode == GPIO_MODE_AF)
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	2b02      	cmp	r3, #2
 8000506:	d123      	bne.n	8000550 <GPIO_Init+0x152>
			{
				tempValue = GPIOx->AFR[position >> 3U]; //8'e bölme
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	08da      	lsrs	r2, r3, #3
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	3208      	adds	r2, #8
 8000510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000514:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0xFU << ( (position & 0x7U) * 4 ) ); //8'e mod alma
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	f003 0307 	and.w	r3, r3, #7
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	220f      	movs	r2, #15
 8000520:	fa02 f303 	lsl.w	r3, r2, r3
 8000524:	43db      	mvns	r3, r3
 8000526:	68ba      	ldr	r2, [r7, #8]
 8000528:	4013      	ands	r3, r2
 800052a:	60bb      	str	r3, [r7, #8]
				tempValue |= (GPIO_ConfigStruct->Alternate << ( (position & 0x7U) * 4 ) );
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	695a      	ldr	r2, [r3, #20]
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	f003 0307 	and.w	r3, r3, #7
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	fa02 f303 	lsl.w	r3, r2, r3
 800053c:	68ba      	ldr	r2, [r7, #8]
 800053e:	4313      	orrs	r3, r2
 8000540:	60bb      	str	r3, [r7, #8]
				GPIOx->AFR[position >> 3U] = tempValue;
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	08da      	lsrs	r2, r3, #3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	3208      	adds	r2, #8
 800054a:	68b9      	ldr	r1, [r7, #8]
 800054c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(position = 0; position < GPIO_MAX_PIN_POSITION; position++)
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	3301      	adds	r3, #1
 8000554:	617b      	str	r3, [r7, #20]
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	2b0f      	cmp	r3, #15
 800055a:	f67f af5c 	bls.w	8000416 <GPIO_Init+0x18>
			}
		}
	}
}
 800055e:	bf00      	nop
 8000560:	bf00      	nop
 8000562:	371c      	adds	r7, #28
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <RCC_GetSystemClock>:

const uint8_t AHB_Prescalers[] = { 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
const uint8_t APB_Prescalers[] = { 0, 0 ,0 , 1, 2, 3, 4};

uint32_t RCC_GetSystemClock(void)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
	uint32_t SystemCoreClock = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
	uint8_t clkSource = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	70fb      	strb	r3, [r7, #3]

	clkSource = ( (RCC->CFGR >> 2U) & 0x3U );
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <RCC_GetSystemClock+0x48>)
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	089b      	lsrs	r3, r3, #2
 8000580:	b2db      	uxtb	r3, r3
 8000582:	f003 0303 	and.w	r3, r3, #3
 8000586:	70fb      	strb	r3, [r7, #3]

	switch(clkSource)
 8000588:	78fb      	ldrb	r3, [r7, #3]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d002      	beq.n	8000594 <RCC_GetSystemClock+0x28>
 800058e:	2b01      	cmp	r3, #1
 8000590:	d003      	beq.n	800059a <RCC_GetSystemClock+0x2e>
 8000592:	e005      	b.n	80005a0 <RCC_GetSystemClock+0x34>
	{
		case 0 : SystemCoreClock = 8000000; break; // HSI
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <RCC_GetSystemClock+0x4c>)
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	e004      	b.n	80005a4 <RCC_GetSystemClock+0x38>
		case 1 : SystemCoreClock = 32000000; break;  // HSE
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <RCC_GetSystemClock+0x50>)
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	e001      	b.n	80005a4 <RCC_GetSystemClock+0x38>

		default : SystemCoreClock = 8000000;
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <RCC_GetSystemClock+0x4c>)
 80005a2:	607b      	str	r3, [r7, #4]
	}

	return SystemCoreClock;
 80005a4:	687b      	ldr	r3, [r7, #4]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	40021000 	.word	0x40021000
 80005b8:	007a1200 	.word	0x007a1200
 80005bc:	01e84800 	.word	0x01e84800

080005c0 <RCC_GetHClock>:

uint32_t RCC_GetHClock(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
	uint32_t AHB_PeriphClock = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
	uint32_t SystemCoreClock = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
	uint8_t HPRE_Value = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	71fb      	strb	r3, [r7, #7]
	uint8_t tempValue = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	71bb      	strb	r3, [r7, #6]

	SystemCoreClock = RCC_GetSystemClock();
 80005d6:	f7ff ffc9 	bl	800056c <RCC_GetSystemClock>
 80005da:	60b8      	str	r0, [r7, #8]

	HPRE_Value = ( (RCC->CFGR >> 4U) & 0xFU );
 80005dc:	4b0a      	ldr	r3, [pc, #40]	; (8000608 <RCC_GetHClock+0x48>)
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	091b      	lsrs	r3, r3, #4
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	f003 030f 	and.w	r3, r3, #15
 80005e8:	71fb      	strb	r3, [r7, #7]
	tempValue = AHB_Prescalers[HPRE_Value];
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	4a07      	ldr	r2, [pc, #28]	; (800060c <RCC_GetHClock+0x4c>)
 80005ee:	5cd3      	ldrb	r3, [r2, r3]
 80005f0:	71bb      	strb	r3, [r7, #6]

	AHB_PeriphClock = SystemCoreClock >> tempValue;
 80005f2:	79bb      	ldrb	r3, [r7, #6]
 80005f4:	68ba      	ldr	r2, [r7, #8]
 80005f6:	fa22 f303 	lsr.w	r3, r2, r3
 80005fa:	60fb      	str	r3, [r7, #12]

	return AHB_PeriphClock;
 80005fc:	68fb      	ldr	r3, [r7, #12]
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40021000 	.word	0x40021000
 800060c:	08000b58 	.word	0x08000b58

08000610 <RCC_GetP1Clock>:

uint32_t RCC_GetP1Clock(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
	uint32_t APB1_PeriphClock = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
	uint32_t AHB_PeriphClock = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
	uint8_t PPRE1_Value = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	71fb      	strb	r3, [r7, #7]
	uint8_t tempValue = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	71bb      	strb	r3, [r7, #6]

	AHB_PeriphClock = RCC_GetHClock();
 8000626:	f7ff ffcb 	bl	80005c0 <RCC_GetHClock>
 800062a:	60b8      	str	r0, [r7, #8]

	PPRE1_Value = ( (RCC->CFGR >> 8U) & 0x7U );
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <RCC_GetP1Clock+0x48>)
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	0a1b      	lsrs	r3, r3, #8
 8000632:	b2db      	uxtb	r3, r3
 8000634:	f003 0307 	and.w	r3, r3, #7
 8000638:	71fb      	strb	r3, [r7, #7]
	tempValue = APB_Prescalers[PPRE1_Value];
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	4a07      	ldr	r2, [pc, #28]	; (800065c <RCC_GetP1Clock+0x4c>)
 800063e:	5cd3      	ldrb	r3, [r2, r3]
 8000640:	71bb      	strb	r3, [r7, #6]

	APB1_PeriphClock = AHB_PeriphClock >> tempValue;
 8000642:	79bb      	ldrb	r3, [r7, #6]
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	fa22 f303 	lsr.w	r3, r2, r3
 800064a:	60fb      	str	r3, [r7, #12]

	return APB1_PeriphClock;
 800064c:	68fb      	ldr	r3, [r7, #12]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000
 800065c:	08000b68 	.word	0x08000b68

08000660 <RCC_GetP2Clock>:

uint32_t RCC_GetP2Clock(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
	uint32_t APB2_PeriphClock = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
	uint32_t AHB_PeriphClock = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
	uint8_t PPRE2_Value = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	71fb      	strb	r3, [r7, #7]
	uint8_t tempValue = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	71bb      	strb	r3, [r7, #6]

	AHB_PeriphClock = RCC_GetHClock();
 8000676:	f7ff ffa3 	bl	80005c0 <RCC_GetHClock>
 800067a:	60b8      	str	r0, [r7, #8]

	PPRE2_Value = ( (RCC->CFGR >> 11U) & 0x7U);
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <RCC_GetP2Clock+0x48>)
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	0adb      	lsrs	r3, r3, #11
 8000682:	b2db      	uxtb	r3, r3
 8000684:	f003 0307 	and.w	r3, r3, #7
 8000688:	71fb      	strb	r3, [r7, #7]
	tempValue = APB_Prescalers[PPRE2_Value];
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	4a07      	ldr	r2, [pc, #28]	; (80006ac <RCC_GetP2Clock+0x4c>)
 800068e:	5cd3      	ldrb	r3, [r2, r3]
 8000690:	71bb      	strb	r3, [r7, #6]

	APB2_PeriphClock = AHB_PeriphClock >> tempValue;
 8000692:	79bb      	ldrb	r3, [r7, #6]
 8000694:	68ba      	ldr	r2, [r7, #8]
 8000696:	fa22 f303 	lsr.w	r3, r2, r3
 800069a:	60fb      	str	r3, [r7, #12]

	return APB2_PeriphClock;
 800069c:	68fb      	ldr	r3, [r7, #12]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000
 80006ac:	08000b68 	.word	0x08000b68

080006b0 <USART_CloseISR_TX>:
 *  @param	USART_Handle = User config structure
 *
 *  @retval None
 */
static void USART_CloseISR_TX(USART_HandleTypeDef_t *USART_Handle)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	USART_Handle->Instance->CR1 &= ~(0x1U << USART_CR1_TXEIE);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80006c6:	601a      	str	r2, [r3, #0]
	USART_Handle->TxBufferSize = 0;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2200      	movs	r2, #0
 80006cc:	849a      	strh	r2, [r3, #36]	; 0x24
	USART_Handle->pTxBufferAddr = NULL;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
	USART_Handle->busStateTx = USART_BUS_FREE;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2200      	movs	r2, #0
 80006d8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <USART_CloseISR_RX>:
 *  @param	USART_Handle = User config structure
 *
 *  @retval None
 */
static void USART_CloseISR_RX(USART_HandleTypeDef_t *USART_Handle)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	USART_Handle->Instance->CR1 &= ~(0x1U << USART_CR1_RXNEIE);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f022 0220 	bic.w	r2, r2, #32
 80006fe:	601a      	str	r2, [r3, #0]
	USART_Handle->RxBufferSize = 0;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	861a      	strh	r2, [r3, #48]	; 0x30
	USART_Handle->pRxBufferAddr = NULL;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2200      	movs	r2, #0
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
	USART_Handle->busStateRx = USART_BUS_FREE;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2200      	movs	r2, #0
 8000710:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <USART_TransmitHelper_16Bits>:
 *  @param	USART_Handle = User config structure
 *
 *  @retval None
 */
static void USART_TransmitHelper_16Bits(USART_HandleTypeDef_t *USART_Handle)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	uint16_t *p16BitsData = (uint16_t*)USART_Handle->pTxBufferAddr;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	6a1b      	ldr	r3, [r3, #32]
 800072c:	60fb      	str	r3, [r7, #12]
	USART_Handle->Instance->TDR = (uint16_t)( *p16BitsData & (uint16_t)0x01FF );
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	461a      	mov	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800073c:	629a      	str	r2, [r3, #40]	; 0x28
	USART_Handle->pTxBufferAddr += sizeof(uint16_t);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6a1b      	ldr	r3, [r3, #32]
 8000742:	1c9a      	adds	r2, r3, #2
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	621a      	str	r2, [r3, #32]
	USART_Handle->TxBufferSize -= 2;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800074c:	3b02      	subs	r3, #2
 800074e:	b29a      	uxth	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	849a      	strh	r2, [r3, #36]	; 0x24

	if(USART_Handle->TxBufferSize == 0)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000758:	2b00      	cmp	r3, #0
 800075a:	d102      	bne.n	8000762 <USART_TransmitHelper_16Bits+0x42>
	{
		USART_CloseISR_TX(USART_Handle);
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff ffa7 	bl	80006b0 <USART_CloseISR_TX>
	}
}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <USART_TransmitHelper_8Bits>:
 *  @param	USART_Handle = User config structure
 *
 *  @retval None
 */
static void USART_TransmitHelper_8Bits(USART_HandleTypeDef_t *USART_Handle)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b084      	sub	sp, #16
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
	uint8_t *p8BitsData = (uint8_t*)USART_Handle->pTxBufferAddr;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6a1b      	ldr	r3, [r3, #32]
 8000776:	60fb      	str	r3, [r7, #12]
	USART_Handle->Instance->TDR = (uint8_t)( *p8BitsData & (uint8_t)0xFF );
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	781a      	ldrb	r2, [r3, #0]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	629a      	str	r2, [r3, #40]	; 0x28
	USART_Handle->pTxBufferAddr += sizeof(uint8_t);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6a1b      	ldr	r3, [r3, #32]
 8000786:	1c5a      	adds	r2, r3, #1
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	621a      	str	r2, [r3, #32]
	USART_Handle->TxBufferSize--;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000790:	3b01      	subs	r3, #1
 8000792:	b29a      	uxth	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	849a      	strh	r2, [r3, #36]	; 0x24

	if(USART_Handle->TxBufferSize == 0)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800079c:	2b00      	cmp	r3, #0
 800079e:	d102      	bne.n	80007a6 <USART_TransmitHelper_8Bits+0x3c>
	{
		USART_CloseISR_TX(USART_Handle);
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff ff85 	bl	80006b0 <USART_CloseISR_TX>

	}
}
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <USART_ReceiveHelper_16Bits>:
 *  @param	USART_Handle = User config structure
 *
 *  @retval None
 */
static void USART_ReceiveHelper_16Bits(USART_HandleTypeDef_t *USART_Handle)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
	*( (uint16_t*)USART_Handle->pRxBufferAddr) = *( (__IO uint16_t*)&USART_Handle->Instance->RDR );
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007c2:	8812      	ldrh	r2, [r2, #0]
 80007c4:	b292      	uxth	r2, r2
 80007c6:	801a      	strh	r2, [r3, #0]
	USART_Handle->pRxBufferAddr += sizeof(uint16_t);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007cc:	1c9a      	adds	r2, r3, #2
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	62da      	str	r2, [r3, #44]	; 0x2c
	USART_Handle->RxBufferSize -= 2;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80007d6:	3b02      	subs	r3, #2
 80007d8:	b29a      	uxth	r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	861a      	strh	r2, [r3, #48]	; 0x30

	if(USART_Handle->RxBufferSize == 0)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d102      	bne.n	80007ec <USART_ReceiveHelper_16Bits+0x3e>
	{
		USART_CloseISR_RX(USART_Handle);
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff ff7e 	bl	80006e8 <USART_CloseISR_RX>
	}
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <USART_ReceiveHelper_8Bits>:
 *  @param	USART_Handle = User config structure
 *
 *  @retval None
 */
static void USART_ReceiveHelper_8Bits(USART_HandleTypeDef_t *USART_Handle)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	*( (uint8_t*)USART_Handle->pRxBufferAddr ) = *( (__IO uint8_t*)&USART_Handle->Instance->RDR );
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000808:	7812      	ldrb	r2, [r2, #0]
 800080a:	b2d2      	uxtb	r2, r2
 800080c:	701a      	strb	r2, [r3, #0]
	USART_Handle->pRxBufferAddr += sizeof(uint8_t);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000812:	1c5a      	adds	r2, r3, #1
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	62da      	str	r2, [r3, #44]	; 0x2c
	USART_Handle->RxBufferSize--;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800081c:	3b01      	subs	r3, #1
 800081e:	b29a      	uxth	r2, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	861a      	strh	r2, [r3, #48]	; 0x30

	if(USART_Handle->RxBufferSize == 0)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000828:	2b00      	cmp	r3, #0
 800082a:	d102      	bne.n	8000832 <USART_ReceiveHelper_8Bits+0x3e>
	{
		USART_CloseISR_RX(USART_Handle);
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f7ff ff5b 	bl	80006e8 <USART_CloseISR_RX>
	}
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <USART_PeriphCmd>:
 *	@param  stateOfUSART = ENABLE or DISABLE
 *
 *  @retval None
 */
void USART_PeriphCmd(USART_HandleTypeDef_t *USART_Handle, FunctionalState_t stateOfUSART)
{
 800083a:	b480      	push	{r7}
 800083c:	b083      	sub	sp, #12
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
 8000842:	460b      	mov	r3, r1
 8000844:	70fb      	strb	r3, [r7, #3]
	if( stateOfUSART == ENABLE)
 8000846:	78fb      	ldrb	r3, [r7, #3]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d108      	bne.n	800085e <USART_PeriphCmd+0x24>
	{
		USART_Handle->Instance->CR1 |= (0x1U << USART_CR1_ENABLE);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f042 0201 	orr.w	r2, r2, #1
 800085a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		USART_Handle->Instance->CR1 &= ~(0x1U << USART_CR1_ENABLE);
	}
}
 800085c:	e007      	b.n	800086e <USART_PeriphCmd+0x34>
		USART_Handle->Instance->CR1 &= ~(0x1U << USART_CR1_ENABLE);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f022 0201 	bic.w	r2, r2, #1
 800086c:	601a      	str	r2, [r3, #0]
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
	...

0800087c <USART_Init>:
 *  @param	USART_Handle = User config structure
 *
 *  @retval None
 */
void USART_Init(USART_HandleTypeDef_t *USART_Handle)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	uint32_t periphClock = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
	uint32_t USART_DIV_VALUE = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
	/******** Mode & WordLength & Parity & OverSampling ********/

	uint32_t tempReg = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]

	tempReg = USART_Handle->Instance->CR1;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	613b      	str	r3, [r7, #16]

	tempReg |= (USART_Handle->Init.Mode) | (USART_Handle->Init.WordLength) | \
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	685a      	ldr	r2, [r3, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	431a      	orrs	r2, r3
			   (USART_Handle->Init.Parity) | (USART_Handle->Init.OverSampling);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	691b      	ldr	r3, [r3, #16]
	tempReg |= (USART_Handle->Init.Mode) | (USART_Handle->Init.WordLength) | \
 80008a6:	431a      	orrs	r2, r3
			   (USART_Handle->Init.Parity) | (USART_Handle->Init.OverSampling);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4313      	orrs	r3, r2
	tempReg |= (USART_Handle->Init.Mode) | (USART_Handle->Init.WordLength) | \
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	613b      	str	r3, [r7, #16]

	USART_Handle->Instance->CR1 = tempReg;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	601a      	str	r2, [r3, #0]

	/******** StopBits ********/

	tempReg = USART_Handle->Instance->CR2;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	613b      	str	r3, [r7, #16]

	tempReg &= ~(0x3U << USART_CR2_STOP);
 80008c4:	693b      	ldr	r3, [r7, #16]
 80008c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008ca:	613b      	str	r3, [r7, #16]
	tempReg |= (USART_Handle->Init.StopBits);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	613b      	str	r3, [r7, #16]

	USART_Handle->Instance->CR2 = tempReg;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	605a      	str	r2, [r3, #4]

	/******** HardwareFlowControl ********/

	tempReg = USART_Handle->Instance->CR3;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	613b      	str	r3, [r7, #16]

	tempReg |= (USART_Handle->Init.HardwareFlowControl);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	613b      	str	r3, [r7, #16]

	USART_Handle->Instance->CR3 = tempReg;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	609a      	str	r2, [r3, #8]

	/******** BaudRate Configuration ********/

	if( USART_Handle->Instance == USART1)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a1d      	ldr	r2, [pc, #116]	; (8000974 <USART_Init+0xf8>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d103      	bne.n	800090a <USART_Init+0x8e>
	{
		periphClock = RCC_GetP2Clock();
 8000902:	f7ff fead 	bl	8000660 <RCC_GetP2Clock>
 8000906:	6178      	str	r0, [r7, #20]
 8000908:	e002      	b.n	8000910 <USART_Init+0x94>
	}
	else
	{
		periphClock = RCC_GetP1Clock();
 800090a:	f7ff fe81 	bl	8000610 <RCC_GetP1Clock>
 800090e:	6178      	str	r0, [r7, #20]
	}



	if( USART_Handle->Init.OverSampling == USART_OVERSAMPLE_8 )
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000918:	d117      	bne.n	800094a <USART_Init+0xce>
	{
		USART_DIV_VALUE = __USART_DIV_VALUE_8(periphClock, USART_Handle->Init.BaudRate);
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	005a      	lsls	r2, r3, #1
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	085b      	lsrs	r3, r3, #1
 8000924:	441a      	add	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	fbb2 f3f3 	udiv	r3, r2, r3
 800092e:	60fb      	str	r3, [r7, #12]
		tempReg = (USART_DIV_VALUE & 0xFFF0);
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000936:	4013      	ands	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
		tempReg |= ((USART_DIV_VALUE & 0x000FU) >> 1U);
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	f003 0307 	and.w	r3, r3, #7
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	4313      	orrs	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	e00b      	b.n	8000962 <USART_Init+0xe6>
	}
	else
	{
		USART_DIV_VALUE = __USART_DIV_VALUE_16(periphClock, USART_Handle->Init.BaudRate);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	085a      	lsrs	r2, r3, #1
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	441a      	add	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	fbb2 f3f3 	udiv	r3, r2, r3
 800095c:	60fb      	str	r3, [r7, #12]
		tempReg = USART_DIV_VALUE;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	613b      	str	r3, [r7, #16]
	}

	USART_Handle->Instance->BRR = tempReg;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	60da      	str	r2, [r3, #12]
}
 800096a:	bf00      	nop
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40013800 	.word	0x40013800

08000978 <USART_TransmitData_IT>:
 *	@param  dataSize = Length of your data in bytes
 *
 *  @retval None
 */
void USART_TransmitData_IT(USART_HandleTypeDef_t *USART_Handle, uint8_t *pData, uint16_t dataSize)
{
 8000978:	b480      	push	{r7}
 800097a:	b087      	sub	sp, #28
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	4613      	mov	r3, r2
 8000984:	80fb      	strh	r3, [r7, #6]
	USART_BusStatus_t busState = USART_Handle->busStateTx;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800098c:	75fb      	strb	r3, [r7, #23]

	if(busState != USART_BUS_BUSY_TX)
 800098e:	7dfb      	ldrb	r3, [r7, #23]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d021      	beq.n	80009d8 <USART_TransmitData_IT+0x60>
	{
		USART_Handle->pTxBufferAddr = (uint8_t*)pData;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	621a      	str	r2, [r3, #32]
		USART_Handle->TxBufferSize = (uint16_t)dataSize;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	88fa      	ldrh	r2, [r7, #6]
 800099e:	849a      	strh	r2, [r3, #36]	; 0x24
		USART_Handle->busStateTx = USART_BUS_BUSY_TX;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	2201      	movs	r2, #1
 80009a4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

		if( (USART_Handle->Init.WordLength == USART_WORDLENGTH_9Bits) && (USART_Handle->Init.Parity == USART_PARITY_NONE) )
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009b0:	d107      	bne.n	80009c2 <USART_TransmitData_IT+0x4a>
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	691b      	ldr	r3, [r3, #16]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d103      	bne.n	80009c2 <USART_TransmitData_IT+0x4a>
		{
			USART_Handle->TxISR_Function = USART_TransmitHelper_16Bits;
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	4a09      	ldr	r2, [pc, #36]	; (80009e4 <USART_TransmitData_IT+0x6c>)
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
 80009c0:	e002      	b.n	80009c8 <USART_TransmitData_IT+0x50>
		}
		else
		{
			USART_Handle->TxISR_Function = USART_TransmitHelper_8Bits;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <USART_TransmitData_IT+0x70>)
 80009c6:	629a      	str	r2, [r3, #40]	; 0x28
		}
		USART_Handle->Instance->CR1 |= (0x1U << USART_CR1_TXEIE);
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80009d6:	601a      	str	r2, [r3, #0]
	}

}
 80009d8:	bf00      	nop
 80009da:	371c      	adds	r7, #28
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	08000721 	.word	0x08000721
 80009e8:	0800076b 	.word	0x0800076b

080009ec <USART_ReceiveData_IT>:
 *	@param dataSize = Length of your data in bytes
 *
 *  @retval None
 */
void USART_ReceiveData_IT(USART_HandleTypeDef_t *USART_Handle, uint8_t *pBuffer, uint16_t dataSize)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b087      	sub	sp, #28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	4613      	mov	r3, r2
 80009f8:	80fb      	strh	r3, [r7, #6]
	USART_BusStatus_t busState = USART_Handle->busStateRx;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000a00:	75fb      	strb	r3, [r7, #23]

	if(busState != USART_BUS_BUSY_RX)
 8000a02:	7dfb      	ldrb	r3, [r7, #23]
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d021      	beq.n	8000a4c <USART_ReceiveData_IT+0x60>
	{
		USART_Handle->pRxBufferAddr = (uint8_t*)pBuffer;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	62da      	str	r2, [r3, #44]	; 0x2c
		USART_Handle->RxBufferSize = (uint16_t)dataSize;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	88fa      	ldrh	r2, [r7, #6]
 8000a12:	861a      	strh	r2, [r3, #48]	; 0x30
		USART_Handle->busStateRx = USART_BUS_BUSY_RX;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2202      	movs	r2, #2
 8000a18:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

		if( (USART_Handle->Init.WordLength == USART_WORDLENGTH_9Bits) && (USART_Handle->Init.Parity == USART_PARITY_NONE) )
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a24:	d107      	bne.n	8000a36 <USART_ReceiveData_IT+0x4a>
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	691b      	ldr	r3, [r3, #16]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d103      	bne.n	8000a36 <USART_ReceiveData_IT+0x4a>
		{
			USART_Handle->RxISR_Function = USART_ReceiveHelper_16Bits;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	4a09      	ldr	r2, [pc, #36]	; (8000a58 <USART_ReceiveData_IT+0x6c>)
 8000a32:	635a      	str	r2, [r3, #52]	; 0x34
 8000a34:	e002      	b.n	8000a3c <USART_ReceiveData_IT+0x50>
		}
		else
		{
			USART_Handle->RxISR_Function = USART_ReceiveHelper_8Bits;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <USART_ReceiveData_IT+0x70>)
 8000a3a:	635a      	str	r2, [r3, #52]	; 0x34
		}
		USART_Handle->Instance->CR1 |= (0x1U << USART_CR1_RXNEIE);
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f042 0220 	orr.w	r2, r2, #32
 8000a4a:	601a      	str	r2, [r3, #0]
	}
}
 8000a4c:	bf00      	nop
 8000a4e:	371c      	adds	r7, #28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	080007af 	.word	0x080007af
 8000a5c:	080007f5 	.word	0x080007f5

08000a60 <USART_InterruptHandler>:
 *  @param	USART_Handle = User config structure
 *
 *  @retval None
 */
void USART_InterruptHandler(USART_HandleTypeDef_t *USART_Handle)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	uint8_t interruptSource = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	73fb      	strb	r3, [r7, #15]
	uint8_t interruptFlag = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	73bb      	strb	r3, [r7, #14]

	interruptSource = (USART_Handle->Instance->CR1 >> USART_CR1_RXNEIE) & 0x1U;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	095b      	lsrs	r3, r3, #5
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	73fb      	strb	r3, [r7, #15]
	interruptFlag = (USART_Handle->Instance->ISR >> USART_ISR_RXNE) & 0x1U;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	095b      	lsrs	r3, r3, #5
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	73bb      	strb	r3, [r7, #14]

	if( (interruptSource != 0) && (interruptFlag != 0) )
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d006      	beq.n	8000aa4 <USART_InterruptHandler+0x44>
 8000a96:	7bbb      	ldrb	r3, [r7, #14]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d003      	beq.n	8000aa4 <USART_InterruptHandler+0x44>
	{
		USART_Handle->RxISR_Function(USART_Handle);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	4798      	blx	r3
	}

	interruptSource = (USART_Handle->Instance->CR1 >> USART_CR1_TXEIE) & 0x1U;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	09db      	lsrs	r3, r3, #7
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	73fb      	strb	r3, [r7, #15]
	interruptFlag = (USART_Handle->Instance->ISR >> USART_ISR_TXE) & 0x1U;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	09db      	lsrs	r3, r3, #7
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	73bb      	strb	r3, [r7, #14]

	if( (interruptSource != 0) && (interruptFlag != 0) )
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d006      	beq.n	8000ad8 <USART_InterruptHandler+0x78>
 8000aca:	7bbb      	ldrb	r3, [r7, #14]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d003      	beq.n	8000ad8 <USART_InterruptHandler+0x78>
	{
		USART_Handle->TxISR_Function(USART_Handle);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	4798      	blx	r3
	}
}
 8000ad8:	bf00      	nop
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <__libc_init_array>:
 8000ae0:	b570      	push	{r4, r5, r6, lr}
 8000ae2:	4d0d      	ldr	r5, [pc, #52]	; (8000b18 <__libc_init_array+0x38>)
 8000ae4:	4c0d      	ldr	r4, [pc, #52]	; (8000b1c <__libc_init_array+0x3c>)
 8000ae6:	1b64      	subs	r4, r4, r5
 8000ae8:	10a4      	asrs	r4, r4, #2
 8000aea:	2600      	movs	r6, #0
 8000aec:	42a6      	cmp	r6, r4
 8000aee:	d109      	bne.n	8000b04 <__libc_init_array+0x24>
 8000af0:	4d0b      	ldr	r5, [pc, #44]	; (8000b20 <__libc_init_array+0x40>)
 8000af2:	4c0c      	ldr	r4, [pc, #48]	; (8000b24 <__libc_init_array+0x44>)
 8000af4:	f000 f818 	bl	8000b28 <_init>
 8000af8:	1b64      	subs	r4, r4, r5
 8000afa:	10a4      	asrs	r4, r4, #2
 8000afc:	2600      	movs	r6, #0
 8000afe:	42a6      	cmp	r6, r4
 8000b00:	d105      	bne.n	8000b0e <__libc_init_array+0x2e>
 8000b02:	bd70      	pop	{r4, r5, r6, pc}
 8000b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b08:	4798      	blx	r3
 8000b0a:	3601      	adds	r6, #1
 8000b0c:	e7ee      	b.n	8000aec <__libc_init_array+0xc>
 8000b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b12:	4798      	blx	r3
 8000b14:	3601      	adds	r6, #1
 8000b16:	e7f2      	b.n	8000afe <__libc_init_array+0x1e>
 8000b18:	08000b70 	.word	0x08000b70
 8000b1c:	08000b70 	.word	0x08000b70
 8000b20:	08000b70 	.word	0x08000b70
 8000b24:	08000b74 	.word	0x08000b74

08000b28 <_init>:
 8000b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b2a:	bf00      	nop
 8000b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b2e:	bc08      	pop	{r3}
 8000b30:	469e      	mov	lr, r3
 8000b32:	4770      	bx	lr

08000b34 <_fini>:
 8000b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b36:	bf00      	nop
 8000b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b3a:	bc08      	pop	{r3}
 8000b3c:	469e      	mov	lr, r3
 8000b3e:	4770      	bx	lr
