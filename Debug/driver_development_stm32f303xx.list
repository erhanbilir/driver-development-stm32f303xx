
driver_development_stm32f303xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008a8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a3c  08000a3c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a3c  08000a3c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08000a3c  08000a3c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a3c  08000a3c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a3c  08000a3c  00010a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a40  08000a40  00010a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          0000004c  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000064  20000064  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 14 .debug_info   000014f0  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000053a  00000000  00000000  0002157b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000150  00000000  00000000  00021ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000e6  00000000  00000000  00021c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000028e2  00000000  00000000  00021cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001ead  00000000  00000000  000245d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000a867  00000000  00000000  0002647d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000042c  00000000  00000000  00030ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  00031110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000a24 	.word	0x08000a24

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08000a24 	.word	0x08000a24

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <EXTI15_10_IRQHandler>:
SPI_HandleTypeDef_t SPI_HandleStructure;
USART_HandleTypeDef_t USART_Handle;

char msgToSend[] = "Hello Are You There!\n";
void EXTI15_10_IRQHandler()
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0

	if(EXTI->PR1 & (0x1 << 0xDU))
 80001e8:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <EXTI15_10_IRQHandler+0x34>)
 80001ea:	695b      	ldr	r3, [r3, #20]
 80001ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d00f      	beq.n	8000214 <EXTI15_10_IRQHandler+0x30>
	{
		EXTI->PR1 |= (0x1U << 0xDU);
 80001f4:	4b08      	ldr	r3, [pc, #32]	; (8000218 <EXTI15_10_IRQHandler+0x34>)
 80001f6:	695b      	ldr	r3, [r3, #20]
 80001f8:	4a07      	ldr	r2, [pc, #28]	; (8000218 <EXTI15_10_IRQHandler+0x34>)
 80001fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001fe:	6153      	str	r3, [r2, #20]
		SPI_TransmitData_IT(&SPI_HandleStructure, (uint8_t*)msgToSend, strlen(msgToSend));
 8000200:	4806      	ldr	r0, [pc, #24]	; (800021c <EXTI15_10_IRQHandler+0x38>)
 8000202:	f7ff ffe7 	bl	80001d4 <strlen>
 8000206:	4603      	mov	r3, r0
 8000208:	b29b      	uxth	r3, r3
 800020a:	461a      	mov	r2, r3
 800020c:	4903      	ldr	r1, [pc, #12]	; (800021c <EXTI15_10_IRQHandler+0x38>)
 800020e:	4804      	ldr	r0, [pc, #16]	; (8000220 <EXTI15_10_IRQHandler+0x3c>)
 8000210:	f000 fb7e 	bl	8000910 <SPI_TransmitData_IT>
	}

	//GPIO_TogglePin(GPIOA, GPIO_PIN_5);
}
 8000214:	bf00      	nop
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40010400 	.word	0x40010400
 800021c:	20000000 	.word	0x20000000
 8000220:	20000034 	.word	0x20000034

08000224 <SPI1_IRQHandler>:

void SPI1_IRQHandler()
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	SPI_InterruptHandler(&SPI_HandleStructure);
 8000228:	4802      	ldr	r0, [pc, #8]	; (8000234 <SPI1_IRQHandler+0x10>)
 800022a:	f000 fbab 	bl	8000984 <SPI_InterruptHandler>
}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	20000034 	.word	0x20000034

08000238 <main>:

int main(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	GPIO_LedConfig();
 800023c:	f000 f808 	bl	8000250 <GPIO_LedConfig>
	//GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_Pin_Reset);

	//GPIO_ButtonConfig();
	//GPIO_LockPin(GPIOC, GPIO_PIN_13);
	//GPIO_LockControl();
	GPIO_ButtonInterruptConfig();
 8000240:	f000 f83a 	bl	80002b8 <GPIO_ButtonInterruptConfig>

	SPI_GPIO_Config();
 8000244:	f000 f8a4 	bl	8000390 <SPI_GPIO_Config>

	SPI_Config();
 8000248:	f000 f862 	bl	8000310 <SPI_Config>
//		{
//
//			while(GPIO_ReadPin(GPIOC, GPIO_PIN_13) != GPIO_Pin_Set);
//		}
//	}
	for(;;);
 800024c:	e7fe      	b.n	800024c <main+0x14>
	...

08000250 <GPIO_LedConfig>:
}

static void GPIO_LedConfig()
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000256:	2300      	movs	r3, #0
 8000258:	61fb      	str	r3, [r7, #28]
 800025a:	4b16      	ldr	r3, [pc, #88]	; (80002b4 <GPIO_LedConfig+0x64>)
 800025c:	695b      	ldr	r3, [r3, #20]
 800025e:	4a15      	ldr	r2, [pc, #84]	; (80002b4 <GPIO_LedConfig+0x64>)
 8000260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000264:	6153      	str	r3, [r2, #20]
 8000266:	4b13      	ldr	r3, [pc, #76]	; (80002b4 <GPIO_LedConfig+0x64>)
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800026e:	61fb      	str	r3, [r7, #28]

	GPIO_InitTypeDef_t GPIO_Config = {0};
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]
 800027c:	611a      	str	r2, [r3, #16]
 800027e:	615a      	str	r2, [r3, #20]
	GPIO_Config.Pin = GPIO_PIN_5;
 8000280:	2320      	movs	r3, #32
 8000282:	607b      	str	r3, [r7, #4]
	GPIO_Config.Mode = GPIO_MODE_OUTPUT;
 8000284:	2301      	movs	r3, #1
 8000286:	60bb      	str	r3, [r7, #8]
	GPIO_Config.Speed = GPIO_OSPEED_LOW;
 8000288:	2300      	movs	r3, #0
 800028a:	613b      	str	r3, [r7, #16]
	GPIO_Config.Otype = GPIO_OTYPE_PP;
 800028c:	2300      	movs	r3, #0
 800028e:	60fb      	str	r3, [r7, #12]
	GPIO_Config.PuPd = GPIO_PUPD_NOPULL;
 8000290:	2300      	movs	r3, #0
 8000292:	617b      	str	r3, [r7, #20]

	GPIO_Init(GPIOA, &GPIO_Config);
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	4619      	mov	r1, r3
 8000298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800029c:	f000 f9ca 	bl	8000634 <GPIO_Init>
	memset(&GPIO_Config, 0, sizeof(GPIO_Config));
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2218      	movs	r2, #24
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 fb90 	bl	80009cc <memset>
}
 80002ac:	bf00      	nop
 80002ae:	3720      	adds	r7, #32
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	40021000 	.word	0x40021000

080002b8 <GPIO_ButtonInterruptConfig>:
	GPIO_Init(GPIOC, &GPIO_Config);
	memset(&GPIO_Config, 0, sizeof(GPIO_Config));
}*/

static void GPIO_ButtonInterruptConfig()
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
	//RCC_GPIOA_CLK_EN();
	RCC_SYSCFG_CLK_EN();
 80002be:	2300      	movs	r3, #0
 80002c0:	607b      	str	r3, [r7, #4]
 80002c2:	4b12      	ldr	r3, [pc, #72]	; (800030c <GPIO_ButtonInterruptConfig+0x54>)
 80002c4:	699b      	ldr	r3, [r3, #24]
 80002c6:	4a11      	ldr	r2, [pc, #68]	; (800030c <GPIO_ButtonInterruptConfig+0x54>)
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	6193      	str	r3, [r2, #24]
 80002ce:	4b0f      	ldr	r3, [pc, #60]	; (800030c <GPIO_ButtonInterruptConfig+0x54>)
 80002d0:	699b      	ldr	r3, [r3, #24]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	607b      	str	r3, [r7, #4]
	EXTI_InitTypeDef_t EXTI_InitStruct = {0};
 80002d8:	2300      	movs	r3, #0
 80002da:	603b      	str	r3, [r7, #0]

	EXTI_LineConfig(EXTI_PortSource_GPIOC, EXTI_LineSource_13);
 80002dc:	210d      	movs	r1, #13
 80002de:	2002      	movs	r0, #2
 80002e0:	f000 f8b0 	bl	8000444 <EXTI_LineConfig>

	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 80002e4:	2301      	movs	r3, #1
 80002e6:	70fb      	strb	r3, [r7, #3]
	EXTI_InitStruct.EXTI_LineNumber = EXTI_LineSource_13;
 80002e8:	230d      	movs	r3, #13
 80002ea:	703b      	strb	r3, [r7, #0]
	EXTI_InitStruct.EXTI_Mode = EXTI_MODE_Interrupt;
 80002ec:	2300      	movs	r3, #0
 80002ee:	70bb      	strb	r3, [r7, #2]
	EXTI_InitStruct.TriggerSelection = EXTI_Trigger_Falling;
 80002f0:	230c      	movs	r3, #12
 80002f2:	707b      	strb	r3, [r7, #1]

	EXTI_Init(&EXTI_InitStruct);
 80002f4:	463b      	mov	r3, r7
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 f8d8 	bl	80004ac <EXTI_Init>

	NVIC_EnableInterrupt(EXTI15_10_IRQNumber);
 80002fc:	2028      	movs	r0, #40	; 0x28
 80002fe:	f000 f965 	bl	80005cc <NVIC_EnableInterrupt>
}
 8000302:	bf00      	nop
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40021000 	.word	0x40021000

08000310 <SPI_Config>:

static void SPI_Config()
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
	RCC_SPI1_CLK_EN();
 8000316:	2300      	movs	r3, #0
 8000318:	607b      	str	r3, [r7, #4]
 800031a:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <SPI_Config+0x74>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	4a19      	ldr	r2, [pc, #100]	; (8000384 <SPI_Config+0x74>)
 8000320:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000324:	6193      	str	r3, [r2, #24]
 8000326:	4b17      	ldr	r3, [pc, #92]	; (8000384 <SPI_Config+0x74>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800032e:	607b      	str	r3, [r7, #4]
	SPI_HandleStructure.Instance = SPI1; /* Tek tek registerları eşitlemektense böyle verilebilir */
 8000330:	4b15      	ldr	r3, [pc, #84]	; (8000388 <SPI_Config+0x78>)
 8000332:	4a16      	ldr	r2, [pc, #88]	; (800038c <SPI_Config+0x7c>)
 8000334:	601a      	str	r2, [r3, #0]
	SPI_HandleStructure.Init.BaudRate = SPI_BAUDRATE_DIV8;
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <SPI_Config+0x78>)
 8000338:	2210      	movs	r2, #16
 800033a:	611a      	str	r2, [r3, #16]
	SPI_HandleStructure.Init.BusConfig = SPI_BUS_FullDuplex;
 800033c:	4b12      	ldr	r3, [pc, #72]	; (8000388 <SPI_Config+0x78>)
 800033e:	2200      	movs	r2, #0
 8000340:	619a      	str	r2, [r3, #24]
	SPI_HandleStructure.Init.CPHA = SPI_CPHA_FIRST;
 8000342:	4b11      	ldr	r3, [pc, #68]	; (8000388 <SPI_Config+0x78>)
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
	SPI_HandleStructure.Init.CPOL = SPI_CPOL_LOW;
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <SPI_Config+0x78>)
 800034a:	2200      	movs	r2, #0
 800034c:	60da      	str	r2, [r3, #12]
	SPI_HandleStructure.Init.DataSize = SPI_DATASIZE_8BIT;
 800034e:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <SPI_Config+0x78>)
 8000350:	2207      	movs	r2, #7
 8000352:	61da      	str	r2, [r3, #28]
	SPI_HandleStructure.Init.FrameFormat = SPI_FRAMEFORMAT_MSB;
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <SPI_Config+0x78>)
 8000356:	2200      	movs	r2, #0
 8000358:	621a      	str	r2, [r3, #32]
	SPI_HandleStructure.Init.Mode = SPI_MODE_MASTER;
 800035a:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <SPI_Config+0x78>)
 800035c:	2204      	movs	r2, #4
 800035e:	605a      	str	r2, [r3, #4]
	SPI_HandleStructure.Init.SSM_Cmd = SPI_SSM_ENABLE;
 8000360:	4b09      	ldr	r3, [pc, #36]	; (8000388 <SPI_Config+0x78>)
 8000362:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000366:	615a      	str	r2, [r3, #20]

	SPI_Init(&SPI_HandleStructure);
 8000368:	4807      	ldr	r0, [pc, #28]	; (8000388 <SPI_Config+0x78>)
 800036a:	f000 fa76 	bl	800085a <SPI_Init>

	NVIC_EnableInterrupt(SPI1_IRQNumber);
 800036e:	2023      	movs	r0, #35	; 0x23
 8000370:	f000 f92c 	bl	80005cc <NVIC_EnableInterrupt>

	SPI_PeriphCmd(&SPI_HandleStructure, ENABLE);
 8000374:	2101      	movs	r1, #1
 8000376:	4804      	ldr	r0, [pc, #16]	; (8000388 <SPI_Config+0x78>)
 8000378:	f000 faa9 	bl	80008ce <SPI_PeriphCmd>
}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40021000 	.word	0x40021000
 8000388:	20000034 	.word	0x20000034
 800038c:	40013000 	.word	0x40013000

08000390 <SPI_GPIO_Config>:

static void SPI_GPIO_Config()
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000396:	2300      	movs	r3, #0
 8000398:	61fb      	str	r3, [r7, #28]
 800039a:	4b14      	ldr	r3, [pc, #80]	; (80003ec <SPI_GPIO_Config+0x5c>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a13      	ldr	r2, [pc, #76]	; (80003ec <SPI_GPIO_Config+0x5c>)
 80003a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003a4:	6153      	str	r3, [r2, #20]
 80003a6:	4b11      	ldr	r3, [pc, #68]	; (80003ec <SPI_GPIO_Config+0x5c>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ae:	61fb      	str	r3, [r7, #28]
	GPIO_InitTypeDef_t GPIO_InitStruct = { 0 };
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
 80003bc:	611a      	str	r2, [r3, #16]
 80003be:	615a      	str	r2, [r3, #20]
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_7;
 80003c0:	23a0      	movs	r3, #160	; 0xa0
 80003c2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF;
 80003c4:	2302      	movs	r3, #2
 80003c6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Otype = GPIO_OTYPE_PP;
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.PuPd = GPIO_PUPD_NOPULL;
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_OSPEED_HIGH;
 80003d0:	2303      	movs	r3, #3
 80003d2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF5;
 80003d4:	2305      	movs	r3, #5
 80003d6:	61bb      	str	r3, [r7, #24]

	GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	4619      	mov	r1, r3
 80003dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e0:	f000 f928 	bl	8000634 <GPIO_Init>
}
 80003e4:	bf00      	nop
 80003e6:	3720      	adds	r7, #32
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	40021000 	.word	0x40021000

080003f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f0:	480d      	ldr	r0, [pc, #52]	; (8000428 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f8:	480c      	ldr	r0, [pc, #48]	; (800042c <LoopForever+0x6>)
  ldr r1, =_edata
 80003fa:	490d      	ldr	r1, [pc, #52]	; (8000430 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003fc:	4a0d      	ldr	r2, [pc, #52]	; (8000434 <LoopForever+0xe>)
  movs r3, #0
 80003fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000400:	e002      	b.n	8000408 <LoopCopyDataInit>

08000402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000406:	3304      	adds	r3, #4

08000408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800040a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800040c:	d3f9      	bcc.n	8000402 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800040e:	4a0a      	ldr	r2, [pc, #40]	; (8000438 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000410:	4c0a      	ldr	r4, [pc, #40]	; (800043c <LoopForever+0x16>)
  movs r3, #0
 8000412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000414:	e001      	b.n	800041a <LoopFillZerobss>

08000416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000418:	3204      	adds	r2, #4

0800041a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800041a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800041c:	d3fb      	bcc.n	8000416 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800041e:	f000 fadd 	bl	80009dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000422:	f7ff ff09 	bl	8000238 <main>

08000426 <LoopForever>:

LoopForever:
  b LoopForever
 8000426:	e7fe      	b.n	8000426 <LoopForever>
  ldr   r0, =_estack
 8000428:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800042c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000430:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000434:	08000a44 	.word	0x08000a44
  ldr r2, =_sbss
 8000438:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800043c:	20000064 	.word	0x20000064

08000440 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000440:	e7fe      	b.n	8000440 <ADC1_2_IRQHandler>
	...

08000444 <EXTI_LineConfig>:
  * @param  EXTI_LineSource = Pin Numbers & Line Numbers @def_group EXTI_LINE_Values
  *
  * @retval None
  */
void EXTI_LineConfig(uint8_t PortSource, uint8_t EXTI_LineSource)
{
 8000444:	b480      	push	{r7}
 8000446:	b085      	sub	sp, #20
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	460a      	mov	r2, r1
 800044e:	71fb      	strb	r3, [r7, #7]
 8000450:	4613      	mov	r3, r2
 8000452:	71bb      	strb	r3, [r7, #6]
	uint32_t tempValue;

	tempValue = SYSCFG->EXTICR[EXTI_LineSource >> 2U]; 		//Register'ı bulma
 8000454:	4a14      	ldr	r2, [pc, #80]	; (80004a8 <EXTI_LineConfig+0x64>)
 8000456:	79bb      	ldrb	r3, [r7, #6]
 8000458:	089b      	lsrs	r3, r3, #2
 800045a:	b2db      	uxtb	r3, r3
 800045c:	3302      	adds	r3, #2
 800045e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000462:	60fb      	str	r3, [r7, #12]
	tempValue &= ~(0xFU << (EXTI_LineSource & 0x3U) * 4);	//Registerdaki bitleri sıfırlama
 8000464:	79bb      	ldrb	r3, [r7, #6]
 8000466:	f003 0303 	and.w	r3, r3, #3
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	220f      	movs	r2, #15
 800046e:	fa02 f303 	lsl.w	r3, r2, r3
 8000472:	43db      	mvns	r3, r3
 8000474:	68fa      	ldr	r2, [r7, #12]
 8000476:	4013      	ands	r3, r2
 8000478:	60fb      	str	r3, [r7, #12]
	tempValue = (PortSource << (EXTI_LineSource & 0x3U) * 4);
 800047a:	79fa      	ldrb	r2, [r7, #7]
 800047c:	79bb      	ldrb	r3, [r7, #6]
 800047e:	f003 0303 	and.w	r3, r3, #3
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	fa02 f303 	lsl.w	r3, r2, r3
 8000488:	60fb      	str	r3, [r7, #12]
	SYSCFG->EXTICR[EXTI_LineSource >> 2U] = tempValue;
 800048a:	4907      	ldr	r1, [pc, #28]	; (80004a8 <EXTI_LineConfig+0x64>)
 800048c:	79bb      	ldrb	r3, [r7, #6]
 800048e:	089b      	lsrs	r3, r3, #2
 8000490:	b2db      	uxtb	r3, r3
 8000492:	3302      	adds	r3, #2
 8000494:	68fa      	ldr	r2, [r7, #12]
 8000496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800049a:	bf00      	nop
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	40010000 	.word	0x40010000

080004ac <EXTI_Init>:
  * @param  EXTI_InitStruct = User Config structure
  *
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef_t *EXTI_InitStruct)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
	uint32_t tempValue = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60fb      	str	r3, [r7, #12]
	tempValue = (uint32_t)EXTI_BASE_ADDR;
 80004b8:	4b43      	ldr	r3, [pc, #268]	; (80005c8 <EXTI_Init+0x11c>)
 80004ba:	60fb      	str	r3, [r7, #12]

	EXTI->IMR1 &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80004bc:	4b42      	ldr	r3, [pc, #264]	; (80005c8 <EXTI_Init+0x11c>)
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	4619      	mov	r1, r3
 80004c6:	2301      	movs	r3, #1
 80004c8:	408b      	lsls	r3, r1
 80004ca:	43db      	mvns	r3, r3
 80004cc:	493e      	ldr	r1, [pc, #248]	; (80005c8 <EXTI_Init+0x11c>)
 80004ce:	4013      	ands	r3, r2
 80004d0:	600b      	str	r3, [r1, #0]
	EXTI->EMR1 &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80004d2:	4b3d      	ldr	r3, [pc, #244]	; (80005c8 <EXTI_Init+0x11c>)
 80004d4:	685a      	ldr	r2, [r3, #4]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	4619      	mov	r1, r3
 80004dc:	2301      	movs	r3, #1
 80004de:	408b      	lsls	r3, r1
 80004e0:	43db      	mvns	r3, r3
 80004e2:	4939      	ldr	r1, [pc, #228]	; (80005c8 <EXTI_Init+0x11c>)
 80004e4:	4013      	ands	r3, r2
 80004e6:	604b      	str	r3, [r1, #4]

	if(EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	78db      	ldrb	r3, [r3, #3]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d053      	beq.n	8000598 <EXTI_Init+0xec>
	{
		tempValue += EXTI_InitStruct->EXTI_Mode;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	789b      	ldrb	r3, [r3, #2]
 80004f4:	461a      	mov	r2, r3
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	4413      	add	r3, r2
 80004fa:	60fb      	str	r3, [r7, #12]

		*((__IO uint32_t*)tempValue ) |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	6819      	ldr	r1, [r3, #0]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	461a      	mov	r2, r3
 8000506:	2301      	movs	r3, #1
 8000508:	fa03 f202 	lsl.w	r2, r3, r2
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	430a      	orrs	r2, r1
 8000510:	601a      	str	r2, [r3, #0]

		tempValue = (uint32_t)EXTI_BASE_ADDR;
 8000512:	4b2d      	ldr	r3, [pc, #180]	; (80005c8 <EXTI_Init+0x11c>)
 8000514:	60fb      	str	r3, [r7, #12]

		EXTI->RTSR1 &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000516:	4b2c      	ldr	r3, [pc, #176]	; (80005c8 <EXTI_Init+0x11c>)
 8000518:	689a      	ldr	r2, [r3, #8]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	4619      	mov	r1, r3
 8000520:	2301      	movs	r3, #1
 8000522:	408b      	lsls	r3, r1
 8000524:	43db      	mvns	r3, r3
 8000526:	4928      	ldr	r1, [pc, #160]	; (80005c8 <EXTI_Init+0x11c>)
 8000528:	4013      	ands	r3, r2
 800052a:	608b      	str	r3, [r1, #8]
		EXTI->FTSR1 &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 800052c:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <EXTI_Init+0x11c>)
 800052e:	68da      	ldr	r2, [r3, #12]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4619      	mov	r1, r3
 8000536:	2301      	movs	r3, #1
 8000538:	408b      	lsls	r3, r1
 800053a:	43db      	mvns	r3, r3
 800053c:	4922      	ldr	r1, [pc, #136]	; (80005c8 <EXTI_Init+0x11c>)
 800053e:	4013      	ands	r3, r2
 8000540:	60cb      	str	r3, [r1, #12]

		if(EXTI_InitStruct->TriggerSelection == EXTI_Trigger_RF)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	785b      	ldrb	r3, [r3, #1]
 8000546:	2b10      	cmp	r3, #16
 8000548:	d114      	bne.n	8000574 <EXTI_Init+0xc8>
		{
			EXTI->RTSR1 |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 800054a:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <EXTI_Init+0x11c>)
 800054c:	689a      	ldr	r2, [r3, #8]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	4619      	mov	r1, r3
 8000554:	2301      	movs	r3, #1
 8000556:	408b      	lsls	r3, r1
 8000558:	491b      	ldr	r1, [pc, #108]	; (80005c8 <EXTI_Init+0x11c>)
 800055a:	4313      	orrs	r3, r2
 800055c:	608b      	str	r3, [r1, #8]
			EXTI->FTSR1 |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 800055e:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <EXTI_Init+0x11c>)
 8000560:	68da      	ldr	r2, [r3, #12]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	4619      	mov	r1, r3
 8000568:	2301      	movs	r3, #1
 800056a:	408b      	lsls	r3, r1
 800056c:	4916      	ldr	r1, [pc, #88]	; (80005c8 <EXTI_Init+0x11c>)
 800056e:	4313      	orrs	r3, r2
 8000570:	60cb      	str	r3, [r1, #12]
	else
	{
		tempValue += EXTI_InitStruct->EXTI_Mode;
		*((__IO uint32_t*)tempValue ) &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
	}
}
 8000572:	e022      	b.n	80005ba <EXTI_Init+0x10e>
			tempValue += EXTI_InitStruct->TriggerSelection;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	785b      	ldrb	r3, [r3, #1]
 8000578:	461a      	mov	r2, r3
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	4413      	add	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
			*((__IO uint32_t*)tempValue) |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	6819      	ldr	r1, [r3, #0]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	461a      	mov	r2, r3
 800058a:	2301      	movs	r3, #1
 800058c:	fa03 f202 	lsl.w	r2, r3, r2
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	430a      	orrs	r2, r1
 8000594:	601a      	str	r2, [r3, #0]
}
 8000596:	e010      	b.n	80005ba <EXTI_Init+0x10e>
		tempValue += EXTI_InitStruct->EXTI_Mode;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	789b      	ldrb	r3, [r3, #2]
 800059c:	461a      	mov	r2, r3
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	4413      	add	r3, r2
 80005a2:	60fb      	str	r3, [r7, #12]
		*((__IO uint32_t*)tempValue ) &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	6819      	ldr	r1, [r3, #0]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	461a      	mov	r2, r3
 80005ae:	2301      	movs	r3, #1
 80005b0:	4093      	lsls	r3, r2
 80005b2:	43da      	mvns	r2, r3
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	400a      	ands	r2, r1
 80005b8:	601a      	str	r2, [r3, #0]
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	40010400 	.word	0x40010400

080005cc <NVIC_EnableInterrupt>:
  * @param  IRQNumber = IRQ Number of line
  *
  * @retval None
  */
void NVIC_EnableInterrupt(IRQNumber_TypeDef_t IRQNumber)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	uint32_t tempValue = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]

	tempValue = *( (IRQNumber >> 5U ) + NVIC_ISER0 );
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	095b      	lsrs	r3, r3, #5
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80005e6:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	60fb      	str	r3, [r7, #12]
	tempValue &= ~(0x1U << (IRQNumber & 0x1FU) );
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	f003 031f 	and.w	r3, r3, #31
 80005f4:	2201      	movs	r2, #1
 80005f6:	fa02 f303 	lsl.w	r3, r2, r3
 80005fa:	43db      	mvns	r3, r3
 80005fc:	68fa      	ldr	r2, [r7, #12]
 80005fe:	4013      	ands	r3, r2
 8000600:	60fb      	str	r3, [r7, #12]
	tempValue |=  (0x1U << (IRQNumber & 0x1FU) );
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	f003 031f 	and.w	r3, r3, #31
 8000608:	2201      	movs	r2, #1
 800060a:	fa02 f303 	lsl.w	r3, r2, r3
 800060e:	68fa      	ldr	r2, [r7, #12]
 8000610:	4313      	orrs	r3, r2
 8000612:	60fb      	str	r3, [r7, #12]
	*( (IRQNumber >> 5U ) + NVIC_ISER0 ) = tempValue;
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	095b      	lsrs	r3, r3, #5
 8000618:	b2db      	uxtb	r3, r3
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000620:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000624:	68fa      	ldr	r2, [r7, #12]
 8000626:	601a      	str	r2, [r3, #0]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <GPIO_Init>:
 *
 *  @retval None
 */

void GPIO_Init(GPIO_TypeDef_t *GPIOx, GPIO_InitTypeDef_t *GPIO_ConfigStruct)
{
 8000634:	b480      	push	{r7}
 8000636:	b087      	sub	sp, #28
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t fakePosition = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
	uint32_t lastPosition = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
	for(position = 0; position < GPIO_MAX_PIN_POSITION; position++)
 8000646:	2300      	movs	r3, #0
 8000648:	617b      	str	r3, [r7, #20]
 800064a:	e09f      	b.n	800078c <GPIO_Init+0x158>
	{
		fakePosition = (0x1U << position);
 800064c:	2201      	movs	r2, #1
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	fa02 f303 	lsl.w	r3, r2, r3
 8000654:	613b      	str	r3, [r7, #16]
		lastPosition = (uint32_t)(GPIO_ConfigStruct->Pin) & fakePosition;
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	693a      	ldr	r2, [r7, #16]
 800065c:	4013      	ands	r3, r2
 800065e:	60fb      	str	r3, [r7, #12]
		if(fakePosition == lastPosition)
 8000660:	693a      	ldr	r2, [r7, #16]
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	429a      	cmp	r2, r3
 8000666:	f040 808e 	bne.w	8000786 <GPIO_Init+0x152>
		{
			/* MODE Config */
			uint32_t tempValue = GPIOx->MODER;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	60bb      	str	r3, [r7, #8]
			tempValue &= ~(0x3U << (position * 2));
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	2203      	movs	r2, #3
 8000676:	fa02 f303 	lsl.w	r3, r2, r3
 800067a:	43db      	mvns	r3, r3
 800067c:	68ba      	ldr	r2, [r7, #8]
 800067e:	4013      	ands	r3, r2
 8000680:	60bb      	str	r3, [r7, #8]
			tempValue |= GPIO_ConfigStruct->Mode << (position * 2);
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	685a      	ldr	r2, [r3, #4]
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	4313      	orrs	r3, r2
 8000692:	60bb      	str	r3, [r7, #8]
			GPIOx->MODER = tempValue;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	68ba      	ldr	r2, [r7, #8]
 8000698:	601a      	str	r2, [r3, #0]

			if(GPIO_ConfigStruct->Mode == GPIO_MODE_OUTPUT || GPIO_ConfigStruct->Mode == GPIO_MODE_AF)
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d003      	beq.n	80006aa <GPIO_Init+0x76>
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	2b02      	cmp	r3, #2
 80006a8:	d12d      	bne.n	8000706 <GPIO_Init+0xd2>
			{
				/* OTYPE Config */
				tempValue = GPIOx->OTYPER;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0x1U << position);
 80006b0:	2201      	movs	r2, #1
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	fa02 f303 	lsl.w	r3, r2, r3
 80006b8:	43db      	mvns	r3, r3
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	4013      	ands	r3, r2
 80006be:	60bb      	str	r3, [r7, #8]
				tempValue |= GPIO_ConfigStruct->Otype << position;
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	689a      	ldr	r2, [r3, #8]
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	4313      	orrs	r3, r2
 80006ce:	60bb      	str	r3, [r7, #8]
				GPIOx->OTYPER = tempValue;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	68ba      	ldr	r2, [r7, #8]
 80006d4:	605a      	str	r2, [r3, #4]

				/* OSPEED Config */
				tempValue = GPIOx->OSPEEDR;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0x3U << (position * 2));
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	2203      	movs	r2, #3
 80006e2:	fa02 f303 	lsl.w	r3, r2, r3
 80006e6:	43db      	mvns	r3, r3
 80006e8:	68ba      	ldr	r2, [r7, #8]
 80006ea:	4013      	ands	r3, r2
 80006ec:	60bb      	str	r3, [r7, #8]
				tempValue |= GPIO_ConfigStruct->Speed << (position * 2);
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	68da      	ldr	r2, [r3, #12]
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	fa02 f303 	lsl.w	r3, r2, r3
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	60bb      	str	r3, [r7, #8]
				GPIOx->OSPEEDR = tempValue;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	609a      	str	r2, [r3, #8]

			}
			/* Push Pull Config */
			tempValue = GPIOx->PUPDR;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	60bb      	str	r3, [r7, #8]
			tempValue &= ~(0x3U << (position * 2));
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	2203      	movs	r2, #3
 8000712:	fa02 f303 	lsl.w	r3, r2, r3
 8000716:	43db      	mvns	r3, r3
 8000718:	68ba      	ldr	r2, [r7, #8]
 800071a:	4013      	ands	r3, r2
 800071c:	60bb      	str	r3, [r7, #8]
			tempValue |= GPIO_ConfigStruct->PuPd << (position * 2);
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	691a      	ldr	r2, [r3, #16]
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	4313      	orrs	r3, r2
 800072e:	60bb      	str	r3, [r7, #8]
			GPIOx->PUPDR = tempValue;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	60da      	str	r2, [r3, #12]

			if(GPIO_ConfigStruct->Mode == GPIO_MODE_AF)
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	2b02      	cmp	r3, #2
 800073c:	d123      	bne.n	8000786 <GPIO_Init+0x152>
			{
				tempValue = GPIOx->AFR[position >> 3U]; //8'e bölme
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	08da      	lsrs	r2, r3, #3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	3208      	adds	r2, #8
 8000746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800074a:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0xFU << ( (position & 0x7U) * 4 ) ); //8'e mod alma
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	f003 0307 	and.w	r3, r3, #7
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	220f      	movs	r2, #15
 8000756:	fa02 f303 	lsl.w	r3, r2, r3
 800075a:	43db      	mvns	r3, r3
 800075c:	68ba      	ldr	r2, [r7, #8]
 800075e:	4013      	ands	r3, r2
 8000760:	60bb      	str	r3, [r7, #8]
				tempValue |= (GPIO_ConfigStruct->Alternate << ( (position & 0x7U) * 4 ) );
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	695a      	ldr	r2, [r3, #20]
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	f003 0307 	and.w	r3, r3, #7
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	fa02 f303 	lsl.w	r3, r2, r3
 8000772:	68ba      	ldr	r2, [r7, #8]
 8000774:	4313      	orrs	r3, r2
 8000776:	60bb      	str	r3, [r7, #8]
				GPIOx->AFR[position >> 3U] = tempValue;
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	08da      	lsrs	r2, r3, #3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3208      	adds	r2, #8
 8000780:	68b9      	ldr	r1, [r7, #8]
 8000782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(position = 0; position < GPIO_MAX_PIN_POSITION; position++)
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	3301      	adds	r3, #1
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	2b0f      	cmp	r3, #15
 8000790:	f67f af5c 	bls.w	800064c <GPIO_Init+0x18>
			}
		}
	}
}
 8000794:	bf00      	nop
 8000796:	bf00      	nop
 8000798:	371c      	adds	r7, #28
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <SPI_CloseISR_TX>:
#include "SPI.h"

static void SPI_CloseISR_TX(SPI_HandleTypeDef_t *SPI_Handle)
{
 80007a2:	b480      	push	{r7}
 80007a4:	b083      	sub	sp, #12
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
	SPI_Handle->Instance->CR2 &= ~(0x1U << SPI_CR2_TXEIE);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	685a      	ldr	r2, [r3, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80007b8:	605a      	str	r2, [r3, #4]
	SPI_Handle->TxDataSize = 0;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2200      	movs	r2, #0
 80007be:	851a      	strh	r2, [r3, #40]	; 0x28
	SPI_Handle->pTxDataAddr = NULL;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
	SPI_Handle->busStateTx = SPI_BUS_FREE;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <SPI_TransmitHelper_16Bits>:

static void SPI_TransmitHelper_16Bits(SPI_HandleTypeDef_t *SPI_Handle)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
	SPI_Handle->Instance->DR = *( (uint16_t*)(SPI_Handle->pTxDataAddr) );
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e6:	881a      	ldrh	r2, [r3, #0]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	60da      	str	r2, [r3, #12]
	SPI_Handle->pTxDataAddr += sizeof(uint16_t);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f2:	1c9a      	adds	r2, r3, #2
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	625a      	str	r2, [r3, #36]	; 0x24
	SPI_Handle->TxDataSize -= 2;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80007fc:	3b02      	subs	r3, #2
 80007fe:	b29a      	uxth	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	851a      	strh	r2, [r3, #40]	; 0x28

	if(SPI_Handle->TxDataSize == 0)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000808:	2b00      	cmp	r3, #0
 800080a:	d102      	bne.n	8000812 <SPI_TransmitHelper_16Bits+0x38>
	{
		SPI_CloseISR_TX(SPI_Handle);
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff ffc8 	bl	80007a2 <SPI_CloseISR_TX>
	}
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <SPI_TransmitHelper_8Bits>:

static void SPI_TransmitHelper_8Bits(SPI_HandleTypeDef_t *SPI_Handle)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
	SPI_Handle->Instance->DR = *(uint8_t*)(SPI_Handle->pTxDataAddr );
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	60da      	str	r2, [r3, #12]
	SPI_Handle->pTxDataAddr += sizeof(uint8_t);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000832:	1c5a      	adds	r2, r3, #1
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	625a      	str	r2, [r3, #36]	; 0x24
	SPI_Handle->TxDataSize--;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800083c:	3b01      	subs	r3, #1
 800083e:	b29a      	uxth	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	851a      	strh	r2, [r3, #40]	; 0x28

	if(SPI_Handle->TxDataSize == 0)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000848:	2b00      	cmp	r3, #0
 800084a:	d102      	bne.n	8000852 <SPI_TransmitHelper_8Bits+0x38>
	{
		SPI_CloseISR_TX(SPI_Handle);
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff ffa8 	bl	80007a2 <SPI_CloseISR_TX>
	}
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <SPI_Init>:
 *  @retval None
 */


void SPI_Init(SPI_HandleTypeDef_t *SPI_Handle)
{
 800085a:	b480      	push	{r7}
 800085c:	b085      	sub	sp, #20
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
	uint32_t tempValue = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]

	tempValue = SPI_Handle->Instance->CR1;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	60fb      	str	r3, [r7, #12]
	tempValue |= (SPI_Handle->Init.BaudRate) | (SPI_Handle->Init.CPHA) | (SPI_Handle->Init.CPOL) | \
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	691a      	ldr	r2, [r3, #16]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	431a      	orrs	r2, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	431a      	orrs	r2, r3
				 (SPI_Handle->Init.Mode) | (SPI_Handle->Init.FrameFormat) | (SPI_Handle->Init.BusConfig) | (SPI_Handle->Init.SSM_Cmd);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	685b      	ldr	r3, [r3, #4]
	tempValue |= (SPI_Handle->Init.BaudRate) | (SPI_Handle->Init.CPHA) | (SPI_Handle->Init.CPOL) | \
 8000882:	431a      	orrs	r2, r3
				 (SPI_Handle->Init.Mode) | (SPI_Handle->Init.FrameFormat) | (SPI_Handle->Init.BusConfig) | (SPI_Handle->Init.SSM_Cmd);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6a1b      	ldr	r3, [r3, #32]
 8000888:	431a      	orrs	r2, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	431a      	orrs	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	695b      	ldr	r3, [r3, #20]
 8000894:	4313      	orrs	r3, r2
	tempValue |= (SPI_Handle->Init.BaudRate) | (SPI_Handle->Init.CPHA) | (SPI_Handle->Init.CPOL) | \
 8000896:	68fa      	ldr	r2, [r7, #12]
 8000898:	4313      	orrs	r3, r2
 800089a:	60fb      	str	r3, [r7, #12]

	SPI_Handle->Instance->CR1 = tempValue;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	68fa      	ldr	r2, [r7, #12]
 80008a2:	601a      	str	r2, [r3, #0]

	tempValue = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
	tempValue = SPI_Handle->Instance->CR2;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	60fb      	str	r3, [r7, #12]
	tempValue |= SPI_Handle->Init.DataSize;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	69db      	ldr	r3, [r3, #28]
 80008b4:	68fa      	ldr	r2, [r7, #12]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	60fb      	str	r3, [r7, #12]
	SPI_Handle->Instance->CR2 = tempValue;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	605a      	str	r2, [r3, #4]
}
 80008c2:	bf00      	nop
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <SPI_PeriphCmd>:
 *
 *  @retval None
 */

void SPI_PeriphCmd(SPI_HandleTypeDef_t *SPI_Handle, FunctionalState_t stateOfSPI)
{
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
 80008d6:	460b      	mov	r3, r1
 80008d8:	70fb      	strb	r3, [r7, #3]
	if(stateOfSPI == ENABLE)
 80008da:	78fb      	ldrb	r3, [r7, #3]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d108      	bne.n	80008f2 <SPI_PeriphCmd+0x24>
	{
		SPI_Handle->Instance->CR1 |= (0x1U << SPI_CR1_SPE);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80008ee:	601a      	str	r2, [r3, #0]
	else
	{
		SPI_Handle->Instance->CR1 &= ~(0x1U << SPI_CR1_SPE);
	}

}
 80008f0:	e007      	b.n	8000902 <SPI_PeriphCmd+0x34>
		SPI_Handle->Instance->CR1 &= ~(0x1U << SPI_CR1_SPE);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000900:	601a      	str	r2, [r3, #0]
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <SPI_TransmitData_IT>:
	}
	while( SPI_GetFlagStatus(SPI_Handle, SPI_BSY_FLAG) & 1); //Wait for busy flag
}

void SPI_TransmitData_IT(SPI_HandleTypeDef_t *SPI_Handle, uint8_t *pData, uint16_t sizeOfData)
{
 8000910:	b480      	push	{r7}
 8000912:	b087      	sub	sp, #28
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	4613      	mov	r3, r2
 800091c:	80fb      	strh	r3, [r7, #6]
	SPI_BusStatus_t busState = SPI_Handle->busStateTx;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000924:	75fb      	strb	r3, [r7, #23]

	if(busState != SPI_BUS_BUSY_TX)
 8000926:	7dfb      	ldrb	r3, [r7, #23]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d020      	beq.n	800096e <SPI_TransmitData_IT+0x5e>
	{
		SPI_Handle->pTxDataAddr = (uint8_t*)pData;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
		SPI_Handle->TxDataSize = (uint16_t)sizeOfData;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	88fa      	ldrh	r2, [r7, #6]
 8000936:	851a      	strh	r2, [r3, #40]	; 0x28
		SPI_Handle->busStateTx = SPI_BUS_BUSY_TX;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2201      	movs	r2, #1
 800093c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

		if( ((SPI_Handle->Instance->CR2 >> SPI_CR2_DS)  & 0xFU) == SPI_DATASIZE_16BIT)
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	0a1b      	lsrs	r3, r3, #8
 8000948:	f003 030f 	and.w	r3, r3, #15
 800094c:	2b0f      	cmp	r3, #15
 800094e:	d103      	bne.n	8000958 <SPI_TransmitData_IT+0x48>
		{
			SPI_Handle->TxISRFunction = SPI_TransmitHelper_16Bits;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <SPI_TransmitData_IT+0x6c>)
 8000954:	62da      	str	r2, [r3, #44]	; 0x2c
 8000956:	e002      	b.n	800095e <SPI_TransmitData_IT+0x4e>
		}
		else
		{
			SPI_Handle->TxISRFunction = SPI_TransmitHelper_8Bits;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	4a09      	ldr	r2, [pc, #36]	; (8000980 <SPI_TransmitData_IT+0x70>)
 800095c:	62da      	str	r2, [r3, #44]	; 0x2c
		}

		SPI_Handle->Instance->CR2 |= (0x1U << SPI_CR2_TXEIE);
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	685a      	ldr	r2, [r3, #4]
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800096c:	605a      	str	r2, [r3, #4]
	}

}
 800096e:	bf00      	nop
 8000970:	371c      	adds	r7, #28
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	080007db 	.word	0x080007db
 8000980:	0800081b 	.word	0x0800081b

08000984 <SPI_InterruptHandler>:

void SPI_InterruptHandler(SPI_HandleTypeDef_t *SPI_Handle)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	uint8_t interruptSource = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	73fb      	strb	r3, [r7, #15]
	uint8_t interruptFlag = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	73bb      	strb	r3, [r7, #14]

	interruptSource = SPI_Handle->Instance->CR2 & (0x1U << SPI_CR2_TXEIE);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	b2db      	uxtb	r3, r3
 800099c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80009a0:	73fb      	strb	r3, [r7, #15]
	interruptFlag = SPI_Handle->Instance->SR & (0x1U << SPI_SR_TXE);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	73bb      	strb	r3, [r7, #14]

	if( (interruptSource != 0) && (interruptFlag != 0) )
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d006      	beq.n	80009c4 <SPI_InterruptHandler+0x40>
 80009b6:	7bbb      	ldrb	r3, [r7, #14]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d003      	beq.n	80009c4 <SPI_InterruptHandler+0x40>
	{
		SPI_Handle->TxISRFunction(SPI_Handle);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	4798      	blx	r3
	}
}
 80009c4:	bf00      	nop
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <memset>:
 80009cc:	4402      	add	r2, r0
 80009ce:	4603      	mov	r3, r0
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d100      	bne.n	80009d6 <memset+0xa>
 80009d4:	4770      	bx	lr
 80009d6:	f803 1b01 	strb.w	r1, [r3], #1
 80009da:	e7f9      	b.n	80009d0 <memset+0x4>

080009dc <__libc_init_array>:
 80009dc:	b570      	push	{r4, r5, r6, lr}
 80009de:	4d0d      	ldr	r5, [pc, #52]	; (8000a14 <__libc_init_array+0x38>)
 80009e0:	4c0d      	ldr	r4, [pc, #52]	; (8000a18 <__libc_init_array+0x3c>)
 80009e2:	1b64      	subs	r4, r4, r5
 80009e4:	10a4      	asrs	r4, r4, #2
 80009e6:	2600      	movs	r6, #0
 80009e8:	42a6      	cmp	r6, r4
 80009ea:	d109      	bne.n	8000a00 <__libc_init_array+0x24>
 80009ec:	4d0b      	ldr	r5, [pc, #44]	; (8000a1c <__libc_init_array+0x40>)
 80009ee:	4c0c      	ldr	r4, [pc, #48]	; (8000a20 <__libc_init_array+0x44>)
 80009f0:	f000 f818 	bl	8000a24 <_init>
 80009f4:	1b64      	subs	r4, r4, r5
 80009f6:	10a4      	asrs	r4, r4, #2
 80009f8:	2600      	movs	r6, #0
 80009fa:	42a6      	cmp	r6, r4
 80009fc:	d105      	bne.n	8000a0a <__libc_init_array+0x2e>
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a04:	4798      	blx	r3
 8000a06:	3601      	adds	r6, #1
 8000a08:	e7ee      	b.n	80009e8 <__libc_init_array+0xc>
 8000a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a0e:	4798      	blx	r3
 8000a10:	3601      	adds	r6, #1
 8000a12:	e7f2      	b.n	80009fa <__libc_init_array+0x1e>
 8000a14:	08000a3c 	.word	0x08000a3c
 8000a18:	08000a3c 	.word	0x08000a3c
 8000a1c:	08000a3c 	.word	0x08000a3c
 8000a20:	08000a40 	.word	0x08000a40

08000a24 <_init>:
 8000a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a26:	bf00      	nop
 8000a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a2a:	bc08      	pop	{r3}
 8000a2c:	469e      	mov	lr, r3
 8000a2e:	4770      	bx	lr

08000a30 <_fini>:
 8000a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a32:	bf00      	nop
 8000a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a36:	bc08      	pop	{r3}
 8000a38:	469e      	mov	lr, r3
 8000a3a:	4770      	bx	lr
