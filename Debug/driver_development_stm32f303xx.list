
driver_development_stm32f303xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000710  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080008a4  080008a4  000108a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080008cc  080008cc  000108d4  2**0
                  CONTENTS
  4 .ARM          00000000  080008cc  080008cc  000108d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008cc  080008d4  000108d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008cc  080008cc  000108cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008d0  080008d0  000108d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000108d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000108d4  2**0
                  CONTENTS
 10 .bss          0000003c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000003c  2000003c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000108d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010904  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000f22  00000000  00000000  00010947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000004ba  00000000  00000000  00011869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000108  00000000  00000000  00011d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000b0  00000000  00000000  00011e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002753  00000000  00000000  00011ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001cf3  00000000  00000000  00014633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000a3a2  00000000  00000000  00016326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000002c8  00000000  00000000  000206c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00020990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800088c 	.word	0x0800088c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800088c 	.word	0x0800088c

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <main>:

static void GPIO_Config();
static void UART_Config(void);

int main(void)
{
 80001e4:	b590      	push	{r4, r7, lr}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
	char msg[] = "Hello World!\n\r";
 80001ea:	4b0c      	ldr	r3, [pc, #48]	; (800021c <main+0x38>)
 80001ec:	463c      	mov	r4, r7
 80001ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001f0:	c407      	stmia	r4!, {r0, r1, r2}
 80001f2:	8023      	strh	r3, [r4, #0]
 80001f4:	3402      	adds	r4, #2
 80001f6:	0c1b      	lsrs	r3, r3, #16
 80001f8:	7023      	strb	r3, [r4, #0]

	GPIO_Config();
 80001fa:	f000 f84d 	bl	8000298 <GPIO_Config>
	UART_Config();
 80001fe:	f000 f811 	bl	8000224 <UART_Config>

	USART_TransmitData(&USART_Handle, (uint8_t*)msg, strlen(msg));
 8000202:	463b      	mov	r3, r7
 8000204:	4618      	mov	r0, r3
 8000206:	f7ff ffe5 	bl	80001d4 <strlen>
 800020a:	4603      	mov	r3, r0
 800020c:	b29a      	uxth	r2, r3
 800020e:	463b      	mov	r3, r7
 8000210:	4619      	mov	r1, r3
 8000212:	4803      	ldr	r0, [pc, #12]	; (8000220 <main+0x3c>)
 8000214:	f000 fa90 	bl	8000738 <USART_TransmitData>
	while(1);
 8000218:	e7fe      	b.n	8000218 <main+0x34>
 800021a:	bf00      	nop
 800021c:	080008a4 	.word	0x080008a4
 8000220:	2000001c 	.word	0x2000001c

08000224 <UART_Config>:
}

static void UART_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
	RCC_USART2_CLK_EN();
 800022a:	2300      	movs	r3, #0
 800022c:	607b      	str	r3, [r7, #4]
 800022e:	4b17      	ldr	r3, [pc, #92]	; (800028c <UART_Config+0x68>)
 8000230:	69db      	ldr	r3, [r3, #28]
 8000232:	4a16      	ldr	r2, [pc, #88]	; (800028c <UART_Config+0x68>)
 8000234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000238:	61d3      	str	r3, [r2, #28]
 800023a:	4b14      	ldr	r3, [pc, #80]	; (800028c <UART_Config+0x68>)
 800023c:	69db      	ldr	r3, [r3, #28]
 800023e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000242:	607b      	str	r3, [r7, #4]

	USART_Handle.Instance = USART2;
 8000244:	4b12      	ldr	r3, [pc, #72]	; (8000290 <UART_Config+0x6c>)
 8000246:	4a13      	ldr	r2, [pc, #76]	; (8000294 <UART_Config+0x70>)
 8000248:	601a      	str	r2, [r3, #0]
	USART_Handle.Init.BaudRate = 9600;
 800024a:	4b11      	ldr	r3, [pc, #68]	; (8000290 <UART_Config+0x6c>)
 800024c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000250:	609a      	str	r2, [r3, #8]
	USART_Handle.Init.HardwareFlowControl = USART_HW_NONE;
 8000252:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <UART_Config+0x6c>)
 8000254:	2200      	movs	r2, #0
 8000256:	61da      	str	r2, [r3, #28]
	USART_Handle.Init.Mode = USART_MODE_TX;
 8000258:	4b0d      	ldr	r3, [pc, #52]	; (8000290 <UART_Config+0x6c>)
 800025a:	2208      	movs	r2, #8
 800025c:	605a      	str	r2, [r3, #4]
	USART_Handle.Init.OverSampling = USART_OVERSAMPLE_16;
 800025e:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <UART_Config+0x6c>)
 8000260:	2200      	movs	r2, #0
 8000262:	619a      	str	r2, [r3, #24]
	USART_Handle.Init.Parity = USART_PARITY_NONE;
 8000264:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <UART_Config+0x6c>)
 8000266:	2200      	movs	r2, #0
 8000268:	611a      	str	r2, [r3, #16]
	USART_Handle.Init.StopBits = USART_STOPBITS_1;
 800026a:	4b09      	ldr	r3, [pc, #36]	; (8000290 <UART_Config+0x6c>)
 800026c:	2200      	movs	r2, #0
 800026e:	615a      	str	r2, [r3, #20]
	USART_Handle.Init.WordLength = USART_WORDLENGTH_8Bits;
 8000270:	4b07      	ldr	r3, [pc, #28]	; (8000290 <UART_Config+0x6c>)
 8000272:	2200      	movs	r2, #0
 8000274:	60da      	str	r2, [r3, #12]

	USART_Init(&USART_Handle);
 8000276:	4806      	ldr	r0, [pc, #24]	; (8000290 <UART_Config+0x6c>)
 8000278:	f000 f9e0 	bl	800063c <USART_Init>
	USART_PeriphCmd(&USART_Handle, ENABLE);
 800027c:	2101      	movs	r1, #1
 800027e:	4804      	ldr	r0, [pc, #16]	; (8000290 <UART_Config+0x6c>)
 8000280:	f000 f9bc 	bl	80005fc <USART_PeriphCmd>
}
 8000284:	bf00      	nop
 8000286:	3708      	adds	r7, #8
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	40021000 	.word	0x40021000
 8000290:	2000001c 	.word	0x2000001c
 8000294:	40004400 	.word	0x40004400

08000298 <GPIO_Config>:

static void GPIO_Config(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b088      	sub	sp, #32
 800029c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef_t GPIO_InitStruct = {0};
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
 80002a6:	609a      	str	r2, [r3, #8]
 80002a8:	60da      	str	r2, [r3, #12]
 80002aa:	611a      	str	r2, [r3, #16]
 80002ac:	615a      	str	r2, [r3, #20]

	RCC_GPIOA_CLK_EN();
 80002ae:	2300      	movs	r3, #0
 80002b0:	61fb      	str	r3, [r7, #28]
 80002b2:	4b10      	ldr	r3, [pc, #64]	; (80002f4 <GPIO_Config+0x5c>)
 80002b4:	695b      	ldr	r3, [r3, #20]
 80002b6:	4a0f      	ldr	r2, [pc, #60]	; (80002f4 <GPIO_Config+0x5c>)
 80002b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002bc:	6153      	str	r3, [r2, #20]
 80002be:	4b0d      	ldr	r3, [pc, #52]	; (80002f4 <GPIO_Config+0x5c>)
 80002c0:	695b      	ldr	r3, [r3, #20]
 80002c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002c6:	61fb      	str	r3, [r7, #28]

	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80002c8:	2304      	movs	r3, #4
 80002ca:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF;
 80002cc:	2302      	movs	r3, #2
 80002ce:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Otype = GPIO_OTYPE_PP;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.PuPd = GPIO_PUPD_NOPULL;
 80002d4:	2300      	movs	r3, #0
 80002d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_OSPEED_HIGH;
 80002d8:	2303      	movs	r3, #3
 80002da:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7;
 80002dc:	2307      	movs	r3, #7
 80002de:	61bb      	str	r3, [r7, #24]

	GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	4619      	mov	r1, r3
 80002e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e8:	f000 f82f 	bl	800034a <GPIO_Init>
}
 80002ec:	bf00      	nop
 80002ee:	3720      	adds	r7, #32
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	40021000 	.word	0x40021000

080002f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f8:	480d      	ldr	r0, [pc, #52]	; (8000330 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000300:	480c      	ldr	r0, [pc, #48]	; (8000334 <LoopForever+0x6>)
  ldr r1, =_edata
 8000302:	490d      	ldr	r1, [pc, #52]	; (8000338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000304:	4a0d      	ldr	r2, [pc, #52]	; (800033c <LoopForever+0xe>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000308:	e002      	b.n	8000310 <LoopCopyDataInit>

0800030a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800030c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030e:	3304      	adds	r3, #4

08000310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000314:	d3f9      	bcc.n	800030a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000316:	4a0a      	ldr	r2, [pc, #40]	; (8000340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000318:	4c0a      	ldr	r4, [pc, #40]	; (8000344 <LoopForever+0x16>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800031c:	e001      	b.n	8000322 <LoopFillZerobss>

0800031e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000320:	3204      	adds	r2, #4

08000322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000324:	d3fb      	bcc.n	800031e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000326:	f000 fa8d 	bl	8000844 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032a:	f7ff ff5b 	bl	80001e4 <main>

0800032e <LoopForever>:

LoopForever:
  b LoopForever
 800032e:	e7fe      	b.n	800032e <LoopForever>
  ldr   r0, =_estack
 8000330:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000338:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800033c:	080008d4 	.word	0x080008d4
  ldr r2, =_sbss
 8000340:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000344:	2000003c 	.word	0x2000003c

08000348 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000348:	e7fe      	b.n	8000348 <ADC1_2_IRQHandler>

0800034a <GPIO_Init>:
 *
 *  @retval None
 */

void GPIO_Init(GPIO_TypeDef_t *GPIOx, GPIO_InitTypeDef_t *GPIO_ConfigStruct)
{
 800034a:	b480      	push	{r7}
 800034c:	b087      	sub	sp, #28
 800034e:	af00      	add	r7, sp, #0
 8000350:	6078      	str	r0, [r7, #4]
 8000352:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t fakePosition = 0;
 8000354:	2300      	movs	r3, #0
 8000356:	613b      	str	r3, [r7, #16]
	uint32_t lastPosition = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]
	for(position = 0; position < GPIO_MAX_PIN_POSITION; position++)
 800035c:	2300      	movs	r3, #0
 800035e:	617b      	str	r3, [r7, #20]
 8000360:	e09f      	b.n	80004a2 <GPIO_Init+0x158>
	{
		fakePosition = (0x1U << position);
 8000362:	2201      	movs	r2, #1
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	fa02 f303 	lsl.w	r3, r2, r3
 800036a:	613b      	str	r3, [r7, #16]
		lastPosition = (uint32_t)(GPIO_ConfigStruct->Pin) & fakePosition;
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	693a      	ldr	r2, [r7, #16]
 8000372:	4013      	ands	r3, r2
 8000374:	60fb      	str	r3, [r7, #12]
		if(fakePosition == lastPosition)
 8000376:	693a      	ldr	r2, [r7, #16]
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	429a      	cmp	r2, r3
 800037c:	f040 808e 	bne.w	800049c <GPIO_Init+0x152>
		{
			/* MODE Config */
			uint32_t tempValue = GPIOx->MODER;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	60bb      	str	r3, [r7, #8]
			tempValue &= ~(0x3U << (position * 2));
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	005b      	lsls	r3, r3, #1
 800038a:	2203      	movs	r2, #3
 800038c:	fa02 f303 	lsl.w	r3, r2, r3
 8000390:	43db      	mvns	r3, r3
 8000392:	68ba      	ldr	r2, [r7, #8]
 8000394:	4013      	ands	r3, r2
 8000396:	60bb      	str	r3, [r7, #8]
			tempValue |= GPIO_ConfigStruct->Mode << (position * 2);
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	685a      	ldr	r2, [r3, #4]
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	005b      	lsls	r3, r3, #1
 80003a0:	fa02 f303 	lsl.w	r3, r2, r3
 80003a4:	68ba      	ldr	r2, [r7, #8]
 80003a6:	4313      	orrs	r3, r2
 80003a8:	60bb      	str	r3, [r7, #8]
			GPIOx->MODER = tempValue;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	68ba      	ldr	r2, [r7, #8]
 80003ae:	601a      	str	r2, [r3, #0]

			if(GPIO_ConfigStruct->Mode == GPIO_MODE_OUTPUT || GPIO_ConfigStruct->Mode == GPIO_MODE_AF)
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	685b      	ldr	r3, [r3, #4]
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d003      	beq.n	80003c0 <GPIO_Init+0x76>
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	685b      	ldr	r3, [r3, #4]
 80003bc:	2b02      	cmp	r3, #2
 80003be:	d12d      	bne.n	800041c <GPIO_Init+0xd2>
			{
				/* OTYPE Config */
				tempValue = GPIOx->OTYPER;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0x1U << position);
 80003c6:	2201      	movs	r2, #1
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	fa02 f303 	lsl.w	r3, r2, r3
 80003ce:	43db      	mvns	r3, r3
 80003d0:	68ba      	ldr	r2, [r7, #8]
 80003d2:	4013      	ands	r3, r2
 80003d4:	60bb      	str	r3, [r7, #8]
				tempValue |= GPIO_ConfigStruct->Otype << position;
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	689a      	ldr	r2, [r3, #8]
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	fa02 f303 	lsl.w	r3, r2, r3
 80003e0:	68ba      	ldr	r2, [r7, #8]
 80003e2:	4313      	orrs	r3, r2
 80003e4:	60bb      	str	r3, [r7, #8]
				GPIOx->OTYPER = tempValue;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	68ba      	ldr	r2, [r7, #8]
 80003ea:	605a      	str	r2, [r3, #4]

				/* OSPEED Config */
				tempValue = GPIOx->OSPEEDR;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0x3U << (position * 2));
 80003f2:	697b      	ldr	r3, [r7, #20]
 80003f4:	005b      	lsls	r3, r3, #1
 80003f6:	2203      	movs	r2, #3
 80003f8:	fa02 f303 	lsl.w	r3, r2, r3
 80003fc:	43db      	mvns	r3, r3
 80003fe:	68ba      	ldr	r2, [r7, #8]
 8000400:	4013      	ands	r3, r2
 8000402:	60bb      	str	r3, [r7, #8]
				tempValue |= GPIO_ConfigStruct->Speed << (position * 2);
 8000404:	683b      	ldr	r3, [r7, #0]
 8000406:	68da      	ldr	r2, [r3, #12]
 8000408:	697b      	ldr	r3, [r7, #20]
 800040a:	005b      	lsls	r3, r3, #1
 800040c:	fa02 f303 	lsl.w	r3, r2, r3
 8000410:	68ba      	ldr	r2, [r7, #8]
 8000412:	4313      	orrs	r3, r2
 8000414:	60bb      	str	r3, [r7, #8]
				GPIOx->OSPEEDR = tempValue;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	68ba      	ldr	r2, [r7, #8]
 800041a:	609a      	str	r2, [r3, #8]

			}
			/* Push Pull Config */
			tempValue = GPIOx->PUPDR;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	68db      	ldr	r3, [r3, #12]
 8000420:	60bb      	str	r3, [r7, #8]
			tempValue &= ~(0x3U << (position * 2));
 8000422:	697b      	ldr	r3, [r7, #20]
 8000424:	005b      	lsls	r3, r3, #1
 8000426:	2203      	movs	r2, #3
 8000428:	fa02 f303 	lsl.w	r3, r2, r3
 800042c:	43db      	mvns	r3, r3
 800042e:	68ba      	ldr	r2, [r7, #8]
 8000430:	4013      	ands	r3, r2
 8000432:	60bb      	str	r3, [r7, #8]
			tempValue |= GPIO_ConfigStruct->PuPd << (position * 2);
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	691a      	ldr	r2, [r3, #16]
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	005b      	lsls	r3, r3, #1
 800043c:	fa02 f303 	lsl.w	r3, r2, r3
 8000440:	68ba      	ldr	r2, [r7, #8]
 8000442:	4313      	orrs	r3, r2
 8000444:	60bb      	str	r3, [r7, #8]
			GPIOx->PUPDR = tempValue;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	68ba      	ldr	r2, [r7, #8]
 800044a:	60da      	str	r2, [r3, #12]

			if(GPIO_ConfigStruct->Mode == GPIO_MODE_AF)
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	2b02      	cmp	r3, #2
 8000452:	d123      	bne.n	800049c <GPIO_Init+0x152>
			{
				tempValue = GPIOx->AFR[position >> 3U]; //8'e bölme
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	08da      	lsrs	r2, r3, #3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	3208      	adds	r2, #8
 800045c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000460:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0xFU << ( (position & 0x7U) * 4 ) ); //8'e mod alma
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	f003 0307 	and.w	r3, r3, #7
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	220f      	movs	r2, #15
 800046c:	fa02 f303 	lsl.w	r3, r2, r3
 8000470:	43db      	mvns	r3, r3
 8000472:	68ba      	ldr	r2, [r7, #8]
 8000474:	4013      	ands	r3, r2
 8000476:	60bb      	str	r3, [r7, #8]
				tempValue |= (GPIO_ConfigStruct->Alternate << ( (position & 0x7U) * 4 ) );
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	695a      	ldr	r2, [r3, #20]
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	f003 0307 	and.w	r3, r3, #7
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	fa02 f303 	lsl.w	r3, r2, r3
 8000488:	68ba      	ldr	r2, [r7, #8]
 800048a:	4313      	orrs	r3, r2
 800048c:	60bb      	str	r3, [r7, #8]
				GPIOx->AFR[position >> 3U] = tempValue;
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	08da      	lsrs	r2, r3, #3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	3208      	adds	r2, #8
 8000496:	68b9      	ldr	r1, [r7, #8]
 8000498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(position = 0; position < GPIO_MAX_PIN_POSITION; position++)
 800049c:	697b      	ldr	r3, [r7, #20]
 800049e:	3301      	adds	r3, #1
 80004a0:	617b      	str	r3, [r7, #20]
 80004a2:	697b      	ldr	r3, [r7, #20]
 80004a4:	2b0f      	cmp	r3, #15
 80004a6:	f67f af5c 	bls.w	8000362 <GPIO_Init+0x18>
			}
		}
	}
}
 80004aa:	bf00      	nop
 80004ac:	bf00      	nop
 80004ae:	371c      	adds	r7, #28
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <RCC_GetSystemClock>:

const uint8_t AHB_Prescalers[] = { 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
const uint8_t APB_Prescalers[] = { 0, 0 ,0 , 1, 2, 3, 4};

uint32_t RCC_GetSystemClock(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
	uint32_t SystemCoreClock = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	607b      	str	r3, [r7, #4]
	uint8_t clkSource = 0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	70fb      	strb	r3, [r7, #3]

	clkSource = ( (RCC->CFGR >> 2U) & 0x3U );
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <RCC_GetSystemClock+0x48>)
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	089b      	lsrs	r3, r3, #2
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	f003 0303 	and.w	r3, r3, #3
 80004d2:	70fb      	strb	r3, [r7, #3]

	switch(clkSource)
 80004d4:	78fb      	ldrb	r3, [r7, #3]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d002      	beq.n	80004e0 <RCC_GetSystemClock+0x28>
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d003      	beq.n	80004e6 <RCC_GetSystemClock+0x2e>
 80004de:	e005      	b.n	80004ec <RCC_GetSystemClock+0x34>
	{
		case 0 : SystemCoreClock = 8000000; break; // HSI
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <RCC_GetSystemClock+0x4c>)
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	e004      	b.n	80004f0 <RCC_GetSystemClock+0x38>
		case 1 : SystemCoreClock = 32000000; break;  // HSE
 80004e6:	4b08      	ldr	r3, [pc, #32]	; (8000508 <RCC_GetSystemClock+0x50>)
 80004e8:	607b      	str	r3, [r7, #4]
 80004ea:	e001      	b.n	80004f0 <RCC_GetSystemClock+0x38>

		default : SystemCoreClock = 8000000;
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <RCC_GetSystemClock+0x4c>)
 80004ee:	607b      	str	r3, [r7, #4]
	}

	return SystemCoreClock;
 80004f0:	687b      	ldr	r3, [r7, #4]
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	40021000 	.word	0x40021000
 8000504:	007a1200 	.word	0x007a1200
 8000508:	01e84800 	.word	0x01e84800

0800050c <RCC_GetHClock>:

uint32_t RCC_GetHClock(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
	uint32_t AHB_PeriphClock = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]
	uint32_t SystemCoreClock = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	60bb      	str	r3, [r7, #8]
	uint8_t HPRE_Value = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	71fb      	strb	r3, [r7, #7]
	uint8_t tempValue = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	71bb      	strb	r3, [r7, #6]

	SystemCoreClock = RCC_GetSystemClock();
 8000522:	f7ff ffc9 	bl	80004b8 <RCC_GetSystemClock>
 8000526:	60b8      	str	r0, [r7, #8]

	HPRE_Value = ( (RCC->CFGR >> 4U) & 0xFU );
 8000528:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <RCC_GetHClock+0x48>)
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	091b      	lsrs	r3, r3, #4
 800052e:	b2db      	uxtb	r3, r3
 8000530:	f003 030f 	and.w	r3, r3, #15
 8000534:	71fb      	strb	r3, [r7, #7]
	tempValue = AHB_Prescalers[HPRE_Value];
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <RCC_GetHClock+0x4c>)
 800053a:	5cd3      	ldrb	r3, [r2, r3]
 800053c:	71bb      	strb	r3, [r7, #6]

	AHB_PeriphClock = SystemCoreClock >> tempValue;
 800053e:	79bb      	ldrb	r3, [r7, #6]
 8000540:	68ba      	ldr	r2, [r7, #8]
 8000542:	fa22 f303 	lsr.w	r3, r2, r3
 8000546:	60fb      	str	r3, [r7, #12]

	return AHB_PeriphClock;
 8000548:	68fb      	ldr	r3, [r7, #12]
}
 800054a:	4618      	mov	r0, r3
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000
 8000558:	080008b4 	.word	0x080008b4

0800055c <RCC_GetP1Clock>:

uint32_t RCC_GetP1Clock(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
	uint32_t APB1_PeriphClock = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
	uint32_t AHB_PeriphClock = 0;
 8000566:	2300      	movs	r3, #0
 8000568:	60bb      	str	r3, [r7, #8]
	uint8_t PPRE1_Value = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	71fb      	strb	r3, [r7, #7]
	uint8_t tempValue = 0;
 800056e:	2300      	movs	r3, #0
 8000570:	71bb      	strb	r3, [r7, #6]

	AHB_PeriphClock = RCC_GetHClock();
 8000572:	f7ff ffcb 	bl	800050c <RCC_GetHClock>
 8000576:	60b8      	str	r0, [r7, #8]

	PPRE1_Value = ( (RCC->CFGR >> 8U) & 0x7U );
 8000578:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <RCC_GetP1Clock+0x48>)
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	0a1b      	lsrs	r3, r3, #8
 800057e:	b2db      	uxtb	r3, r3
 8000580:	f003 0307 	and.w	r3, r3, #7
 8000584:	71fb      	strb	r3, [r7, #7]
	tempValue = APB_Prescalers[PPRE1_Value];
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <RCC_GetP1Clock+0x4c>)
 800058a:	5cd3      	ldrb	r3, [r2, r3]
 800058c:	71bb      	strb	r3, [r7, #6]

	APB1_PeriphClock = AHB_PeriphClock >> tempValue;
 800058e:	79bb      	ldrb	r3, [r7, #6]
 8000590:	68ba      	ldr	r2, [r7, #8]
 8000592:	fa22 f303 	lsr.w	r3, r2, r3
 8000596:	60fb      	str	r3, [r7, #12]

	return APB1_PeriphClock;
 8000598:	68fb      	ldr	r3, [r7, #12]
}
 800059a:	4618      	mov	r0, r3
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000
 80005a8:	080008c4 	.word	0x080008c4

080005ac <RCC_GetP2Clock>:

uint32_t RCC_GetP2Clock(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
	uint32_t APB2_PeriphClock = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
	uint32_t AHB_PeriphClock = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
	uint8_t PPRE2_Value = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	71fb      	strb	r3, [r7, #7]
	uint8_t tempValue = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	71bb      	strb	r3, [r7, #6]

	AHB_PeriphClock = RCC_GetHClock();
 80005c2:	f7ff ffa3 	bl	800050c <RCC_GetHClock>
 80005c6:	60b8      	str	r0, [r7, #8]

	PPRE2_Value = ( (RCC->CFGR >> 11U) & 0x7U);
 80005c8:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <RCC_GetP2Clock+0x48>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	0adb      	lsrs	r3, r3, #11
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	f003 0307 	and.w	r3, r3, #7
 80005d4:	71fb      	strb	r3, [r7, #7]
	tempValue = APB_Prescalers[PPRE2_Value];
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	4a07      	ldr	r2, [pc, #28]	; (80005f8 <RCC_GetP2Clock+0x4c>)
 80005da:	5cd3      	ldrb	r3, [r2, r3]
 80005dc:	71bb      	strb	r3, [r7, #6]

	APB2_PeriphClock = AHB_PeriphClock >> tempValue;
 80005de:	79bb      	ldrb	r3, [r7, #6]
 80005e0:	68ba      	ldr	r2, [r7, #8]
 80005e2:	fa22 f303 	lsr.w	r3, r2, r3
 80005e6:	60fb      	str	r3, [r7, #12]

	return APB2_PeriphClock;
 80005e8:	68fb      	ldr	r3, [r7, #12]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000
 80005f8:	080008c4 	.word	0x080008c4

080005fc <USART_PeriphCmd>:
 *
 *  @retval None
 */

void USART_PeriphCmd(USART_HandleTypeDef_t *USART_Handle, FunctionalState_t stateOfUSART)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	460b      	mov	r3, r1
 8000606:	70fb      	strb	r3, [r7, #3]
	if( stateOfUSART == ENABLE)
 8000608:	78fb      	ldrb	r3, [r7, #3]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d108      	bne.n	8000620 <USART_PeriphCmd+0x24>
	{
		USART_Handle->Instance->CR1 |= (0x1U << USART_CR1_ENABLE);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f042 0201 	orr.w	r2, r2, #1
 800061c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		USART_Handle->Instance->CR1 &= ~(0x1U << USART_CR1_ENABLE);
	}
}
 800061e:	e007      	b.n	8000630 <USART_PeriphCmd+0x34>
		USART_Handle->Instance->CR1 &= ~(0x1U << USART_CR1_ENABLE);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f022 0201 	bic.w	r2, r2, #1
 800062e:	601a      	str	r2, [r3, #0]
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <USART_Init>:
 *
 *  @retval None
 */

void USART_Init(USART_HandleTypeDef_t *USART_Handle)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	uint32_t periphClock = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
	uint32_t USART_DIV_VALUE = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
	/******** Mode & WordLength & Parity & OverSampling ********/

	uint32_t tempReg = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]

	tempReg = USART_Handle->Instance->CR1;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	613b      	str	r3, [r7, #16]

	tempReg |= (USART_Handle->Init.Mode) | (USART_Handle->Init.WordLength) | \
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	685a      	ldr	r2, [r3, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	431a      	orrs	r2, r3
			   (USART_Handle->Init.Parity) | (USART_Handle->Init.OverSampling);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	691b      	ldr	r3, [r3, #16]
	tempReg |= (USART_Handle->Init.Mode) | (USART_Handle->Init.WordLength) | \
 8000666:	431a      	orrs	r2, r3
			   (USART_Handle->Init.Parity) | (USART_Handle->Init.OverSampling);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4313      	orrs	r3, r2
	tempReg |= (USART_Handle->Init.Mode) | (USART_Handle->Init.WordLength) | \
 800066e:	693a      	ldr	r2, [r7, #16]
 8000670:	4313      	orrs	r3, r2
 8000672:	613b      	str	r3, [r7, #16]

	USART_Handle->Instance->CR1 = tempReg;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	693a      	ldr	r2, [r7, #16]
 800067a:	601a      	str	r2, [r3, #0]

	/******** StopBits ********/

	tempReg = USART_Handle->Instance->CR2;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	613b      	str	r3, [r7, #16]

	tempReg &= ~(0x3U << USART_CR2_STOP);
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800068a:	613b      	str	r3, [r7, #16]
	tempReg |= (USART_Handle->Init.StopBits);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	693a      	ldr	r2, [r7, #16]
 8000692:	4313      	orrs	r3, r2
 8000694:	613b      	str	r3, [r7, #16]

	USART_Handle->Instance->CR2 = tempReg;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	693a      	ldr	r2, [r7, #16]
 800069c:	605a      	str	r2, [r3, #4]

	/******** HardwareFlowControl ********/

	tempReg = USART_Handle->Instance->CR3;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	613b      	str	r3, [r7, #16]

	tempReg |= (USART_Handle->Init.HardwareFlowControl);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	693a      	ldr	r2, [r7, #16]
 80006ac:	4313      	orrs	r3, r2
 80006ae:	613b      	str	r3, [r7, #16]

	USART_Handle->Instance->CR3 = tempReg;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	693a      	ldr	r2, [r7, #16]
 80006b6:	609a      	str	r2, [r3, #8]

	/******** BaudRate Configuration ********/

	if( USART_Handle->Instance == USART1)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a1d      	ldr	r2, [pc, #116]	; (8000734 <USART_Init+0xf8>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d103      	bne.n	80006ca <USART_Init+0x8e>
	{
		periphClock = RCC_GetP2Clock();
 80006c2:	f7ff ff73 	bl	80005ac <RCC_GetP2Clock>
 80006c6:	6178      	str	r0, [r7, #20]
 80006c8:	e002      	b.n	80006d0 <USART_Init+0x94>
	}
	else
	{
		periphClock = RCC_GetP1Clock();
 80006ca:	f7ff ff47 	bl	800055c <RCC_GetP1Clock>
 80006ce:	6178      	str	r0, [r7, #20]
	}



	if( USART_Handle->Init.OverSampling == USART_OVERSAMPLE_8 )
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80006d8:	d117      	bne.n	800070a <USART_Init+0xce>
	{
		USART_DIV_VALUE = __USART_DIV_VALUE_8(periphClock, USART_Handle->Init.BaudRate);
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	005a      	lsls	r2, r3, #1
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	085b      	lsrs	r3, r3, #1
 80006e4:	441a      	add	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	689b      	ldr	r3, [r3, #8]
 80006ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ee:	60fb      	str	r3, [r7, #12]
		tempReg = (USART_DIV_VALUE & 0xFFF0);
 80006f0:	68fa      	ldr	r2, [r7, #12]
 80006f2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80006f6:	4013      	ands	r3, r2
 80006f8:	613b      	str	r3, [r7, #16]
		tempReg |= ((USART_DIV_VALUE & 0x000FU) >> 1U);
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	085b      	lsrs	r3, r3, #1
 80006fe:	f003 0307 	and.w	r3, r3, #7
 8000702:	693a      	ldr	r2, [r7, #16]
 8000704:	4313      	orrs	r3, r2
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	e00b      	b.n	8000722 <USART_Init+0xe6>
	}
	else
	{
		USART_DIV_VALUE = __USART_DIV_VALUE_16(periphClock, USART_Handle->Init.BaudRate);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	689b      	ldr	r3, [r3, #8]
 800070e:	085a      	lsrs	r2, r3, #1
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	441a      	add	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	689b      	ldr	r3, [r3, #8]
 8000718:	fbb2 f3f3 	udiv	r3, r2, r3
 800071c:	60fb      	str	r3, [r7, #12]
		tempReg = USART_DIV_VALUE;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	613b      	str	r3, [r7, #16]
	}

	USART_Handle->Instance->BRR = tempReg;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	693a      	ldr	r2, [r7, #16]
 8000728:	60da      	str	r2, [r3, #12]


}
 800072a:	bf00      	nop
 800072c:	3718      	adds	r7, #24
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40013800 	.word	0x40013800

08000738 <USART_TransmitData>:
 *
 *  @retval None
 */

void USART_TransmitData(USART_HandleTypeDef_t *USART_Handle, uint8_t *pData, uint16_t dataSize)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	4613      	mov	r3, r2
 8000744:	80fb      	strh	r3, [r7, #6]
	// 7 bit = frame no parity // 7 bit = frame yes parity

	uint16_t *data9Bits;
	uint8_t *data6Bits;

	if( (USART_Handle->Init.WordLength == USART_WORDLENGTH_9Bits) && (USART_Handle->Init.Parity == USART_PARITY_NONE) )
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	68db      	ldr	r3, [r3, #12]
 800074a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800074e:	d106      	bne.n	800075e <USART_TransmitData+0x26>
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	691b      	ldr	r3, [r3, #16]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d102      	bne.n	800075e <USART_TransmitData+0x26>
	{
		data9Bits = (uint16_t *)pData;
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	e011      	b.n	8000782 <USART_TransmitData+0x4a>
	}
	else if( (USART_Handle->Init.WordLength == USART_WORDLENGTH_7Bits) && (USART_Handle->Init.Parity != USART_PARITY_NONE) )
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000766:	d108      	bne.n	800077a <USART_TransmitData+0x42>
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	691b      	ldr	r3, [r3, #16]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d004      	beq.n	800077a <USART_TransmitData+0x42>
	{
		data9Bits = NULL;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
		data6Bits = pData;
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	e003      	b.n	8000782 <USART_TransmitData+0x4a>
	}
	else
	{
		data9Bits = NULL;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
		data6Bits = NULL;
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
	}

	while( dataSize > 0 )
 8000782:	e039      	b.n	80007f8 <USART_TransmitData+0xc0>
	{
		while( !(USART_GetFlagStatus(USART_Handle, USART_TXE_FLAG)) );
 8000784:	bf00      	nop
 8000786:	2180      	movs	r1, #128	; 0x80
 8000788:	68f8      	ldr	r0, [r7, #12]
 800078a:	f000 f845 	bl	8000818 <USART_GetFlagStatus>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d0f8      	beq.n	8000786 <USART_TransmitData+0x4e>

		/* 9 bits data no parity is for ELSE condition,
		 * 6 bits data with parity is for ELSE IF condition,
		 * for other you will be in IF case */
		if( data9Bits == NULL && data6Bits == NULL)
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d10e      	bne.n	80007b8 <USART_TransmitData+0x80>
 800079a:	693b      	ldr	r3, [r7, #16]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d10b      	bne.n	80007b8 <USART_TransmitData+0x80>
		{
			USART_Handle->Instance->TDR = (uint8_t)(*pData & (0xFFU) );
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	781a      	ldrb	r2, [r3, #0]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	629a      	str	r2, [r3, #40]	; 0x28
			pData++;
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	3301      	adds	r3, #1
 80007ae:	60bb      	str	r3, [r7, #8]
			dataSize--;
 80007b0:	88fb      	ldrh	r3, [r7, #6]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	80fb      	strh	r3, [r7, #6]
 80007b6:	e01f      	b.n	80007f8 <USART_TransmitData+0xc0>
		}
		else if( data6Bits != NULL)
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d00e      	beq.n	80007dc <USART_TransmitData+0xa4>
		{
			USART_Handle->Instance->TDR = (uint8_t)(*data6Bits & (0x3FU) );
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	461a      	mov	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80007cc:	629a      	str	r2, [r3, #40]	; 0x28
			data6Bits++;
 80007ce:	693b      	ldr	r3, [r7, #16]
 80007d0:	3301      	adds	r3, #1
 80007d2:	613b      	str	r3, [r7, #16]
			dataSize--;
 80007d4:	88fb      	ldrh	r3, [r7, #6]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	80fb      	strh	r3, [r7, #6]
 80007da:	e00d      	b.n	80007f8 <USART_TransmitData+0xc0>
		}
		else
		{
			USART_Handle->Instance->TDR = (uint16_t)(*data9Bits & (0x01FFU) );
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80007ea:	629a      	str	r2, [r3, #40]	; 0x28
			data9Bits++;
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	3302      	adds	r3, #2
 80007f0:	617b      	str	r3, [r7, #20]
			dataSize -=2;
 80007f2:	88fb      	ldrh	r3, [r7, #6]
 80007f4:	3b02      	subs	r3, #2
 80007f6:	80fb      	strh	r3, [r7, #6]
	while( dataSize > 0 )
 80007f8:	88fb      	ldrh	r3, [r7, #6]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d1c2      	bne.n	8000784 <USART_TransmitData+0x4c>
		}
	}
	while( !(USART_GetFlagStatus(USART_Handle, USART_TC_FLAG)) );
 80007fe:	bf00      	nop
 8000800:	2140      	movs	r1, #64	; 0x40
 8000802:	68f8      	ldr	r0, [r7, #12]
 8000804:	f000 f808 	bl	8000818 <USART_GetFlagStatus>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d0f8      	beq.n	8000800 <USART_TransmitData+0xc8>
}
 800080e:	bf00      	nop
 8000810:	bf00      	nop
 8000812:	3718      	adds	r7, #24
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <USART_GetFlagStatus>:
 *
 *  @retval FlagStatus_t
 */

FlagStatus_t USART_GetFlagStatus(USART_HandleTypeDef_t *USART_Handle, uint16_t USART_Flag)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	460b      	mov	r3, r1
 8000822:	807b      	strh	r3, [r7, #2]
	return (USART_Handle->Instance->ISR & USART_Flag) ? FLAG_SET : FLAG_RESET;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	69da      	ldr	r2, [r3, #28]
 800082a:	887b      	ldrh	r3, [r7, #2]
 800082c:	4013      	ands	r3, r2
 800082e:	2b00      	cmp	r3, #0
 8000830:	bf14      	ite	ne
 8000832:	2301      	movne	r3, #1
 8000834:	2300      	moveq	r3, #0
 8000836:	b2db      	uxtb	r3, r3
}
 8000838:	4618      	mov	r0, r3
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <__libc_init_array>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	4d0d      	ldr	r5, [pc, #52]	; (800087c <__libc_init_array+0x38>)
 8000848:	4c0d      	ldr	r4, [pc, #52]	; (8000880 <__libc_init_array+0x3c>)
 800084a:	1b64      	subs	r4, r4, r5
 800084c:	10a4      	asrs	r4, r4, #2
 800084e:	2600      	movs	r6, #0
 8000850:	42a6      	cmp	r6, r4
 8000852:	d109      	bne.n	8000868 <__libc_init_array+0x24>
 8000854:	4d0b      	ldr	r5, [pc, #44]	; (8000884 <__libc_init_array+0x40>)
 8000856:	4c0c      	ldr	r4, [pc, #48]	; (8000888 <__libc_init_array+0x44>)
 8000858:	f000 f818 	bl	800088c <_init>
 800085c:	1b64      	subs	r4, r4, r5
 800085e:	10a4      	asrs	r4, r4, #2
 8000860:	2600      	movs	r6, #0
 8000862:	42a6      	cmp	r6, r4
 8000864:	d105      	bne.n	8000872 <__libc_init_array+0x2e>
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f855 3b04 	ldr.w	r3, [r5], #4
 800086c:	4798      	blx	r3
 800086e:	3601      	adds	r6, #1
 8000870:	e7ee      	b.n	8000850 <__libc_init_array+0xc>
 8000872:	f855 3b04 	ldr.w	r3, [r5], #4
 8000876:	4798      	blx	r3
 8000878:	3601      	adds	r6, #1
 800087a:	e7f2      	b.n	8000862 <__libc_init_array+0x1e>
 800087c:	080008cc 	.word	0x080008cc
 8000880:	080008cc 	.word	0x080008cc
 8000884:	080008cc 	.word	0x080008cc
 8000888:	080008d0 	.word	0x080008d0

0800088c <_init>:
 800088c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800088e:	bf00      	nop
 8000890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000892:	bc08      	pop	{r3}
 8000894:	469e      	mov	lr, r3
 8000896:	4770      	bx	lr

08000898 <_fini>:
 8000898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800089a:	bf00      	nop
 800089c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800089e:	bc08      	pop	{r3}
 80008a0:	469e      	mov	lr, r3
 80008a2:	4770      	bx	lr
